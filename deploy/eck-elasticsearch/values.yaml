---
# Default values for eck-elasticsearch.
# This is a YAML-formatted file.

# Overridable names of the Elasticsearch resource.
# By default, this is the Release name set for the chart,
# followed by 'eck-elasticsearch'.
#
# nameOverride will override the name of the Chart with the name set here,
# so nameOverride: quickstart, would convert to '{{ Release.name }}-quickstart'
#
# nameOverride: "quickstart"
#
# fullnameOverride will override both the release name, and the chart name,
# and will name the Elasticsearch resource exactly as specified.
#
# fullnameOverride: "quickstart"

# Version of Elasticsearch.
#
version: 8.5.0

# Labels that will be applied to Elasticsearch.
#
labels: {}

# Annotations that will be applied to Elasticsearch.
#
annotations: {}

# Settings for configuring stack monitoring.
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-stack-monitoring.html
#
monitoring: {}
  # metrics:
  #   elasticsearchRefs:
  #   - name: monitoring
  #     namespace: observability 
  # logs:
  #   elasticsearchRefs:
  #   - name: monitoring
  #     namespace: observability

# Control the Elasticsearch transport module used for internal communication between nodes.
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-transport-settings.html
#
transport: {}
  # service:
  #   metadata:
  #     labels:
  #       my-custom: label
  #   spec:
  #     type: LoadBalancer
  # tls:
  #   subjectAltNames:
  #     - ip: 1.2.3.4
  #     - dns: hulk.example.com
  #   certificate:
  #     secretName: custom-ca

# Settings to control how Elasticsearch will be accessed.
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-accessing-elastic-services.html
#
http: {}
  # service:
  #   metadata:
  #     labels:
  #       my-custom: label
  #   spec:
  #     type: LoadBalancer
  # tls:
  #   subjectAltNames:
  #     - ip: 1.2.3.4
  #     - dns: hulk.example.com
  #   certificate:
  #     secretName: custom-ca

# Control Elasticsearch Secure Settings.
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-es-secure-settings.html#k8s-es-secure-settings
#
secureSettings: {}
  # - secretName: one-secure-settings-secret
  # Projection of secret keys to specific paths
  # - secretName: gcs-secure-settings
  #   entries:
  #   - key: gcs.client.default.credentials_file
  #   - key: gcs_client_1
  #     path: gcs.client.client_1.credentials_file
  #   - key: gcs_client_2
  #     path: gcs.client.client_2.credentials_file

# Settings for limiting the number of simultaneous changes to an Elasticsearch resource.
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-update-strategy.html
#
updateStrategy: {}
  # changeBudget:
  #     maxSurge: 3
  #     maxUnavailable: 1

# Controlling of connectivity between remote clusters within the same kubernetes cluster.
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-remote-clusters.html
#
remoteClusters: {}
  # - name: cluster-two
  #   elasticsearchRef:
  #     name: cluster-two
  #     namespace: ns-two

# Node configuration settings.
# The node roles which can be configured here are:
# - "master"
# - "data_hot"
# - "data_cold"
# - "data_frozen"
# - "data_content"
# - "ml"
# - "ingest"
# ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-node-configuration.html
#
nodeSets:
- name: default
  count: 1
  config:
    # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
    # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
    # and leave node.store.allow_mmap unset.
    # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html
    #
    node.store.allow_mmap: false
  podTemplate:
    spec:
    # Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively
    # try to mark it failed and kill associated containers. Value must be a positive integer.
    # activeDeadlineSeconds: 30

    # If specified, the pod's scheduling constraints
    # https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html
    # affinity:
    #   nodeAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       nodeSelectorTerms:
    #       - matchExpressions:
    #         - key: topology.kubernetes.io/zone
    #           operator: In
    #           values:
    #           - antarctica-east1
    #           - antarctica-west1
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 1
    #       preference:
    #         matchExpressions:
    #         - key: another-node-label-key
    #           operator: In
    #           values:
    #           - another-node-label-value
    #   podAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchExpressions:
    #         - key: security
    #           operator: In
    #           values:
    #           - S1
    #       topologyKey: topology.kubernetes.io/zone
    #   podAntiAffinity:
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #     - weight: 100
    #       podAffinityTerm:
    #         labelSelector:
    #           matchLabels:
    #             elasticsearch.k8s.elastic.co/cluster-name: quickstart
    #         topologyKey: kubernetes.io/hostname

    # AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    # automountServiceAccountToken: false

    # Containers array.  Should only be used to customize the 'elasticsearch' container using the following fields.
      containers:
      - name: elasticsearch
        # Arguments to the entrypoint of the 'elasticsearch' container.
        # args: []

        # Entrypoint array.  Not executed within a shell.
        # command: []

        # List of environment variables to set in the 'elasticsearch' container.
        # env:
        # name/value environment variable pair to set within the 'elasticsearch' container.
        # - name: "my-env-var"
        #   value: "my-value"
        # Set a named environment variable's value from a configuration source.
        # - name: "my-env-from"
        #   valueFrom:
            # Set the value from a configmap.
            # configMapKeyRef:
            #   name: specialEnvConfig
            # Set the value from the container's field.
            # fieldRef:
            #   fieldPath: spec.nodeName
            # Set the value from the container's resource requests.
            # resourceFieldRef:
            #   containerName: "elasticsearch"
            #   resource: requests.cpu
            # Set the value from a secret.
            # secretKeyRef:
            #   name: specialEnvSecretConfig
            #   key: "my-key"

        # List of sources to populate environment variables in the 'elasticsearch' container.
        # envFrom:
        # Set environment variables from key/value pairs within a ConfigMap.
        # - configMapRef:
        #     name: specialEnvConfig
        # An optional identifier to prepend to each key in the ConfigMap.
          # prefix: "DS_"
        # Set environment variables from key/value pairs within a Secret
        # - secretRef:
        #     name: specialEnvSecretConfig
            # Specify whether the Secret must be defined
            # optional: false

        # Container image name.
        # image: ""

        # Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        # imagePullPolicy: "IfNotPresent"

        # Periodic probe of container liveness. Container will be restarted if the probe fails.
        # This is currently unused by the ECK Operator for Elasticsearch.
        # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        # livenessProbe: {}

        # List of ports to expose from the container.
        # This is automatically set by the ECK Operator for Elasticsearch.
        # ports: []

        # Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails.
        # This is automatically set by the ECK Operator for Elasticsearch.
        # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        # readinessProbe:
        #   exec:
        #     command:
        #     - bash
        #     - -c
        #     - /mnt/elastic-internal/scripts/readiness-probe-script.sh
        #   failureThreshold: 3
        #   initialDelaySeconds: 10
        #   periodSeconds: 12
        #   successThreshold: 1
        #   timeoutSeconds: 12

        # Compute Resources required by this container.
        resources:
          # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container,
          # it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.
          requests:
            cpu: 1
            memory: 1Gi
          # Limits describes the maximum amount of compute resources allowed.
          limits:
            cpu: 1
            memory: 1Gi

        # SecurityContext defines the security options the container should be run with.
        # If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
        # securityContext:

          # AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process.
          # This bool directly controls if the no_new_privs flag will be set on the container process.
          # AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
          # allowPrivilegeEscalation: false

          # The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
          # capabilities:
          #   add: ["NET_ADMIN", "SYS_TIME"]
          #   drop: ["ALL"]

          # Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
          # privileged: false

          # procMount denotes the type of proc mount to use for the containers.
          # The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
          # This requires the ProcMountType feature flag to be enabled.
          # procMount: "DefaultProcMount"

          # Whether this container has a read-only root filesystem. Default is false.
          # readOnlyRootFilesystem: false

          # The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.
          # If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          # runAsGroup: 1000

          # Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure
          # that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed.
          # May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          # runAsNonRoot: true

          # The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.
          # If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          # runAsUser: 1000

          # The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.
          # May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
          # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#assign-selinux-labels-to-a-container
          # seLinuxOptions:

            # Level is SELinux level label that applies to the container.
            # level: "s0:c829,c861"

            # Role is a SELinux role label that applies to the container.
            # role: "system_r"

            # Type is a SELinux type label that applies to the container.
            # type: "container_t"

            # User is a SELinux user label that applies to the container.
            # user: "system_u"

          # The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
          # https://kubernetes.io/docs/tutorials/security/seccomp/
          seccompProfile:

            # localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
            # localhostProfile: "profiles/audit.json"

            # type indicates which kind of seccomp profile will be applied. Valid options are:
            # Localhost - a profile defined in a file on the node should be used.
            # RuntimeDefault - the container runtime default profile should be used.
            # Unconfined - no profile should be applied.
            # type: "Localhost"

        # StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully.
        # If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at
        # the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation.
        # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        startupProbe: {}

        # Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
        stdin: false

        # Whether the container runtime should close the stdin channel after it has been opened by a single attach.
        # When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true,
        # stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects,
        # at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
        stdinOnce: false

        # Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
        tty: false

        # volumeDevices is the list of block devices to be used by the container.
        volumeDevices: {}

        # Pod volumes to mount into the container's filesystem.
        volumeMounts: {}

    # Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
    # dnsConfig: {}

    # Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
    # DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
    # dnsPolicy "ClusterFirst"

    # Indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
    # enableServiceLinks: true

    # HostAlias array holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
    # hostAliases:
    # - hostnames: ["hosta", "hostb"]
    #   ip: ["10.0.0.1", "10.0.0.2"]

    # Use the host's ipc namespace. Optional: Default to false.
    # hostIPC: false

    # Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
    # hostNetwork: false

    # Use the host's pid namespace. Optional: Default to false.
    # hostPID: false

    # Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    # hostname: ""

    # ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
    # If specified, these secrets will be passed to individual puller implementations for them to use.
    # https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    # imagePullSecrets:
    # - name: "image-pull-secret"

    # List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started.
    # If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy.
    # The name for an init container or normal container must be unique among all containers.
    # Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.
    # The resourceRequirements of an init container are taken into account during scheduling
    # by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers.
    # Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated.
    #
    # See previous 'containers' field for an exhaustive list of fields that apply.
    #
    # Common initContainers include setting sysctl, or in 7.x versions of Elasticsearch,
    # installing Elasticsearch plugins.
    #
    # https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    # initContainers:
    # - command:
    #   - sh
    #   - "-c"
    #   - sysctl -w vm.max_map_count=262144
    #   name: sysctl
    #   securityContext:
    #     privileged: true
    # - command:
    #   - sh
    #   - "-c"
    #   - bin/elasticsearch-plugin install --batch repository-s3
    #   name: install-plugins
    #   securityContext:
    #     privileged: true

    # NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    # nodeName: ""

    # NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
    # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    # https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html
    # nodeSelector:
    #   diskType: ssd
    #   environment: production

    # PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
    # preemptionPolicy: "PreemptLowerPriority"

    # If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority.
    # Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    # https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
    # priorityClassName: ""

    # Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always.
    # https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
    # restartPolicy: "Always"

    # If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    # schedulerName: ""

    # SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty. See type description for default values of each field.
    # See previously defined 'securityContext' within 'podTemplate' for all available fields.
    # securityContext: {}

    # ServiceAccountName is the name of the ServiceAccount to use to run this pod.
    # https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    # serviceAccountName: ""

    # Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod,
    # and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
    # shareProcessNamespace: false

    # If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
    # subdomain: ""

    # Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer.
    # The value zero indicates stop immediately via the kill signal (no opportunity to shut down).
    # If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running
    # in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal.
    # Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
    # terminationGracePeriodSeconds: 30s

    # If specified, the pod's tolerations that will apply to all containers within the pod.
    # https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    # tolerations:
    # - key: "node-role.kubernetes.io/elasticsearch"
    #   effect: "NoSchedule"
    #   operator: "Exists"

    # TopologySpreadConstraints describes how a group of pods ought to spread across topology domains.
    # Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
    #
    # These settings are generally applied within each `nodeSets[].podTemplate` field to apply to a specific Elasticsearch nodeset.
    #
    # https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html
    # topologySpreadConstraints: {}

    # List of volumes that can be mounted by containers belonging to the pod.
    # https://kubernetes.io/docs/concepts/storage/volumes
    # volumes: []
