pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        REGISTRY = "push.docker.elastic.co"
        REPOSITORY = "eck-snapshots"
        IMG_NAME = "eck-operator"
        SNAPSHOT = "true"
        DOCKER_IMAGE_NO_TAG = "docker.elastic.co/${REPOSITORY}/${IMG_NAME}"
    }

    stages {
        stage('Run unit and integration tests') {
            steps {
                sh 'make -C build/ci ci-pr'
            }
        }
        stage('Build and push Docker image') {
            steps {
                sh """
                    export VERSION=\$(cat $WORKSPACE/VERSION)-\$(date +%F)-\$(git rev-parse --short --verify HEAD)
                    export OPERATOR_IMAGE=${REGISTRY}/${REPOSITORY}/${IMG_NAME}:\$VERSION
                    export LATEST_RELEASED_IMG=docker.elastic.co/${REPOSITORY}/${IMG_NAME}:\$VERSION
                    echo \$LATEST_RELEASED_IMG > eck_image.txt
                    make -C build/ci ci-release
                """
            }
        }
    }

    post {
        success {
            script {
                def image = readFile("$WORKSPACE/eck_image.txt").trim()
                currentBuild.description = image

                build job: 'cloud-on-k8s-versions-gke',
                      parameters: [string(name: 'IMAGE', value: image)],
                      wait: false

                build job: 'cloud-on-k8s-stack',
                      parameters: [string(name: 'IMAGE', value: image)],
                      wait: false
            }
        }
        cleanup {
            cleanWs()
        }
    }

}
