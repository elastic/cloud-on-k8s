pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 45, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        REGISTRY = "eu.gcr.io"
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        TESTS_MATCH = 'TestSmoke'
        GKE_CLUSTER_VERSION = '1.12'
        GKE_CLUSTER_NAME = "${BUILD_TAG}"
    }

    stages {
        stage('Run tests in parallel') {
            parallel {
                stage("Run unit and integration tests") {
                    when {
                        expression {
                            checkout scm
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'linux'
                    }
                    steps {
                        sh 'make -C build/ci ci-pr'
                    }
                }
                stage("Run docs build") {
                    steps {
                        checkout scm
                        sh 'make -C build/ci ci-build-docs'
                    }
                }
                stage("Run smoke E2E tests") {
                    when {
                        expression {
                            checkout scm
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'linux'
                    }
                    steps {
                        sh 'make -C build/ci ci-e2e'
                    }
                }
            }
        }
    }

    post {
        success {
            withEnv([
                'REGISTRY=push.docker.elastic.co',
                'REPOSITORY=eck-snapshots',
                'IMG_SUFFIX=',
                'SNAPSHOT_RELEASE=true',
                'TAG_NAME=${ghprbPullId}'
                ]) {
                sh 'make -C build/ci ci-release'
            }
        }
        cleanup {
            sh 'make -C build/ci ci-gke-cleanup'
            cleanWs()
        }
    }

}

def notOnlyDocs() {
    // grep succeeds if there is at least one line without docs/
    return sh (
        script: "git diff --name-status HEAD~1 HEAD | grep -v docs/",
    	returnStatus: true
    ) == 0
}
