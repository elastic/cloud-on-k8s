pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 45, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
    }

    stages {
        stage('Check if Docker image needs rebuilding') {
            when {
                expression {
                    notOnlyDocs()
                }
            }
            steps {
                sh 'make -C build/ci ci-build-image'
            }
        }
        stage('Run tests in parallel') {
            parallel {
                stage("Run unit and integration tests") {
                    when {
                        expression {
                            notOnlyDocs()
                        }
                    }
                    steps {
                        createConfig()
                        sh 'make -C build/ci TARGET=ci ci'
                    }
                }
                stage("Run smoke E2E tests") {
                    when {
                        expression {
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'eck'
                    }
                    steps {
                        createKindConfig()
                        sh """
                            make kind-e2e-cluster
                            make -C build/ci TARGET=kind-e2e-run ci
                        """
                    }
                }
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }

}

def notOnlyDocs() {
    // grep succeeds if there is at least one line without docs/
    return sh (
        script: "git diff --name-status HEAD~1 HEAD | grep -v docs/",
    	returnStatus: true
    ) == 0
}

void createConfig() {
    sh """
        cat >.env <<EOF
REGISTRY = eu.gcr.io
REPOSITORY = "$GCLOUD_PROJECT"
TESTS_MATCH = TestSmoke
SKIP_DOCKER_COMMAND = false
IMG_SUFFIX = -ci
EOF
    """
}

def createKindConfig() {
    sh """
        cat >.env <<EOF
TESTS_MATCH = TestSmoke
IMG_SUFFIX = -ci
EOF
    """
}
