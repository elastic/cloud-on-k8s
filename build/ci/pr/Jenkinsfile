def failedTests = []
def testScript

pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
    }

    stages {
        stage('Load common scripts') {
            steps {
                script {
                    testScript = load "build/ci/common/tests.groovy"
                }
            }
        }
        stage('Run tests for different ELK stack versions in GKE') {
            parallel {
                stage("7.1.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-71-${BUILD_NUMBER}-e2e", "7.1.1")
                    }
                }
            }
        }
    }

    post {
        cleanup {
            script {
                clusters = ["eck-71-${BUILD_NUMBER}-e2e"]
                for (int i = 0; i < clusters.size(); i++) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                        parameters: [string(name: 'GKE_CLUSTER', value: clusters[i])],
                        wait: false
                }
            }
            cleanWs()
        }
    }

}

def runWith(clusterName, stackVersion) {
    script {
        env.SHELL_EXIT_CODE = sh(returnStatus: true, script: 'fail')

        if (env.SHELL_EXIT_CODE != 0) {
            failedTests.addAll(testScript.getListOfFailedTests())
        }

        sh 'exit $SHELL_EXIT_CODE'
    }
}
