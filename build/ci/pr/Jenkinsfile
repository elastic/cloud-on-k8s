pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 45, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        REGISTRY = "eu.gcr.io"
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        TESTS_MATCH = 'TestSmoke'
        CLUSTER_VERSION = '1.12'
        CLUSTER_NAME = "${BUILD_TAG}"
        SKIP_DOCKER_COMMAND = "false"
    }

    stages {
        stage('Check if Docker image needs rebuilding') {
            when {
                expression {
                    notOnlyDocs()
                }
            }
            steps {
                sh 'make -C build/ci ci-build-image'
            }
        }
        stage('Run tests in parallel') {
            parallel {
                stage("Run unit and integration tests") {
                    when {
                        expression {
                            checkout scm
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'linux'
                    }
                    steps {
                        sh 'make -C build/ci ci-pr'
                    }
                }
                stage("Run smoke E2E tests") {
                    when {
                        expression {
                            checkout scm
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'linux'
                    }
                    steps {
                        sh """
                            cat >run-config.yml <<EOF
id: gke-ci
overrides:
  kubernetesVersion: "$CLUSTER_VERSION"
  clusterName: $CLUSTER_NAME
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
  gke:
    gCloudProject: $GCLOUD_PROJECT
EOF
                            make -C build/ci ci-e2e
                        """
                    }
                }
            }
        }
    }

    post {
        cleanup {
            script {
                if (notOnlyDocs()) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                        parameters: [string(name: 'GKE_CLUSTER', value: "${CLUSTER_NAME}")],
                        wait: false
                }
            }
            cleanWs()
        }
    }
}

def notOnlyDocs() {
    // grep succeeds if there is at least one line without docs/
    return sh (
        script: "git diff --name-status HEAD~1 HEAD | grep -v docs/",
    	returnStatus: true
    ) == 0
}
