pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 45, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        REGISTRY = "eu.gcr.io"
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        TESTS_MATCH = 'TestSmoke'
        GKE_CLUSTER_VERSION = '1.12'
        GKE_CLUSTER_NAME = "${BUILD_TAG}"
    }

    stages {
        stage('Run tests in parallel') {
            parallel {
                stage("Run unit and integration tests") {
                    when {
                        expression {
                            checkout scm
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'linux'
                    }
                    steps {
                        sh 'make -C build/ci ci-pr'
                    }
                }
                stage("Run docs build") {
                    steps {
                        cleanWs()
                        sh 'git clone git@github.com:elastic/docs.git'
                        sh 'git clone git@github.com:elastic/cloud-on-k8s.git'
                        sh """
                            $WORKSPACE/docs/build_docs \
                            --doc $WORKSPACE/cloud-on-k8s/docs/index.asciidoc \
                            --out $WORKSPACE/cloud-on-k8s/docs/html \
                            --chunk 1
                        """
                        sh 'test -e $WORKSPACE/cloud-on-k8s/docs/html/index.html'
                    }
                }
                stage("Run smoke E2E tests") {
                    when {
                        expression {
                            checkout scm
                            notOnlyDocs()
                        }
                    }
                    agent {
                        label 'linux'
                    }
                    steps {
                        sh 'make -C build/ci ci-e2e'
                    }
                }
            }
        }
    }

    post {
        cleanup {
            script {
                if (notOnlyDocs()) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                          parameters: [string(name: 'GKE_CLUSTER', value: "${GKE_CLUSTER_NAME}")],
                          wait: false
                }
            }
            cleanWs()
        }
    }

}

def notOnlyDocs() {
    // grep succeeds if there is at least one line without docs/
    return sh (
        script: "git diff --name-status HEAD~1 HEAD | grep -v docs/",
    	returnStatus: true
    ) == 0
}
