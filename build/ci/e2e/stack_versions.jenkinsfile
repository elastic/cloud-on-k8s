pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        OPERATOR_IMAGE = "${IMAGE}"
        LATEST_RELEASED_IMG = "${IMAGE}"
        SKIP_DOCKER_COMMAND = 'true'
        REGISTRY = "eu.gcr.io"
    }

    stages {
        stage('Run tests for different ELK stack versions in GKE') {
            parallel {
                stage("6.8.0") {
                    environment {
                        STACK_VERSION = "6.8.0"
                    }
                    steps {
                        checkout scm
                        createRunConfig("${BUILD_TAG}-680")
                        sh 'make -C build/ci ci-e2e'
                    }
                }
                stage("7.1.0") {
                    agent {
                        label 'linux'
                    }
                    environment {
                        STACK_VERSION = "7.1.0"
                    }
                    steps {
                        checkout scm
                        createRunConfig("${BUILD_TAG}-710")
                        sh 'make -C build/ci ci-e2e'
                    }
                }
                stage("7.2.0") {
                    agent {
                        label 'linux'
                    }
                    environment {
                        STACK_VERSION = "7.2.0"
                    }
                    steps {
                        checkout scm
                        createRunConfig("${BUILD_TAG}-720")
                        sh 'make -C build/ci ci-e2e'
                    }
                }
                stage("7.3.0") {
                    agent {
                        label 'linux'
                    }
                    environment {
                        STACK_VERSION = "7.3.0"
                    }
                    steps {
                        checkout scm
                        createRunConfig("${BUILD_TAG}-730")
                        sh 'make -C build/ci ci-e2e'
                    }
                }
            }
        }
    }

    post {
        cleanup {
            script {
                clusters = ["${BUILD_TAG}-680", "${BUILD_TAG}-710", "${BUILD_TAG}-720", "${BUILD_TAG}-730"]
                for (int i = 0; i < clusters.size(); i++) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                        parameters: [string(name: 'GKE_CLUSTER', value: clusters[i])],
                        wait: false
                }
            }
            cleanWs()
        }
    }

}

def createRunConfig(clusterName) {
    sh """
        cat >operators/run-config.yml <<EOF
id: gke-ci
overrides:
  operation: create
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
  gke:
    gCloudProject: $GCLOUD_PROJECT
EOF
    """
}
