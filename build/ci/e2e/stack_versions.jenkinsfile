def failedTests = []
def testScript

pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
    }

    stages {
        stage('Load common scripts') {
            steps {
                script {
                    testScript = load "build/ci/common/tests.groovy"
                }
            }
        }
        stage('Run tests for different ELK stack versions in GKE') {
            parallel {
                stage("6.8.4") {
                    steps {
                        checkout scm
                        runWith("eck-68-${BUILD_NUMBER}-e2e", "6.8.4")
                    }
                }
                stage("7.1.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-71-${BUILD_NUMBER}-e2e", "7.1.1")
                    }
                }
                stage("7.2.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-72-${BUILD_NUMBER}-e2e", "7.2.1")
                    }
                }
                stage("7.3.2") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-73-${BUILD_NUMBER}-e2e", "7.3.2")
                    }
                }
                stage("7.4.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-74-${BUILD_NUMBER}-e2e", "7.4.1")
                    }
                }
            }
        }
    }

    post {
        unsuccessful {
            script {
                if (params.SEND_NOTIFICATIONS) {
                    Set<String> filter = new HashSet<>()
                    filter.addAll(failedTests)
                    def msg = testScript.generateSlackMessage("E2E tests for different Elastic stack versions failed!", env.BUILD_URL, filter)

                    slackSend botUser: true,
                        channel: '#cloud-k8s',
                        color: 'danger',
                        message: msg,
                        tokenCredentialId: 'cloud-ci-slack-integration-token'
                }
                googleStorageUpload bucket: "gs://devops-ci-artifacts/jobs/$JOB_NAME/$BUILD_NUMBER",
                    credentialsId: "devops-ci-gcs-plugin",
                    pattern: "*.tgz",
                    sharedPublicly: true,
                    showInline: true
            }
        }
        cleanup {
            script {
                clusters = ["eck-68-${BUILD_NUMBER}-e2e", "eck-71-${BUILD_NUMBER}-e2e", "eck-72-${BUILD_NUMBER}-e2e", "eck-73-${BUILD_NUMBER}-e2e", "eck-74-${BUILD_NUMBER}-e2e"]
                for (int i = 0; i < clusters.size(); i++) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                        parameters: [string(name: 'GKE_CLUSTER', value: clusters[i])],
                        wait: false
                }
            }
            cleanWs()
        }
    }

}

def runWith(clusterName, stackVersion) {
    sh """
        cat >.env <<EOF
OPERATOR_IMAGE = "${IMAGE}"
LATEST_RELEASED_IMG = "${IMAGE}"
GCLOUD_PROJECT = "$GCLOUD_PROJECT"
STACK_VERSION = "${stackVersion}"
SKIP_DOCKER_COMMAND = true
REGISTRY = eu.gcr.io
REPOSITORY = "$GCLOUD_PROJECT"
E2E_JSON = true
EOF
        cat >deployer-config.yml <<EOF
id: gke-ci
overrides:
  operation: create
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
  gke:
    gCloudProject: $GCLOUD_PROJECT
EOF
    """
    script {
        env.SHELL_EXIT_CODE = sh(returnStatus: true, script: 'make -C build/ci TARGET=ci-e2e ci')

        sh 'make -C build/ci TARGET=e2e-generate-xml ci'
        junit "e2e-tests.xml"

        if (env.SHELL_EXIT_CODE != 0) {
            failedTests.addAll(testScript.getListOfFailedTests())
        }

        sh 'exit $SHELL_EXIT_CODE'
    }
}
