pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
    }

    stages {
        stage('Run tests for different ELK stack versions in GKE') {
            parallel {
                stage("6.8.2") {
                    steps {
                        checkout scm
                        runWith("eck-682-${BUILD_NUMBER}-e2e", "6.8.2")
                    }
                }
                stage("7.1.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-711-${BUILD_NUMBER}-e2e", "7.1.1")
                    }
                }
                stage("7.2.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-721-${BUILD_NUMBER}-e2e", "7.2.1")
                    }
                }
                stage("7.3.1") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-731-${BUILD_NUMBER}-e2e", "7.3.1")
                    }
                }
                stage("7.4.0") {
                    agent {
                        label 'linux'
                    }
                    steps {
                        checkout scm
                        runWith("eck-740-${BUILD_NUMBER}-e2e", "7.4.0")
                    }
                }
            }
        }
    }

    post {
        unsuccessful {
            script {
                if (params.SEND_NOTIFICATIONS) {
                    def msg = "E2E tests for different Elastic stack versions failed!\r\n" + env.RUN_DISPLAY_URL
                    slackSend botUser: true,
                        channel: '#cloud-k8s',
                        color: 'danger',
                        message: msg,
                        tokenCredentialId: 'cloud-ci-slack-integration-token'
                }
            }
        }
        cleanup {
            script {
                clusters = ["eck-682-${BUILD_NUMBER}-e2e", "eck-711-${BUILD_NUMBER}-e2e", "eck-721-${BUILD_NUMBER}-e2e", "eck-731-${BUILD_NUMBER}-e2e", "eck-740-${BUILD_NUMBER}-e2e"]
                for (int i = 0; i < clusters.size(); i++) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                        parameters: [string(name: 'GKE_CLUSTER', value: clusters[i])],
                        wait: false
                }
            }
            cleanWs()
        }
    }

}

def runWith(clusterName, stackVersion) {
    sh """
        cat >.env <<EOF
OPERATOR_IMAGE = "${IMAGE}"
LATEST_RELEASED_IMG = "${IMAGE}"
GCLOUD_PROJECT = "$GCLOUD_PROJECT"
STACK_VERSION = "${stackVersion}"
SKIP_DOCKER_COMMAND = true
REGISTRY = eu.gcr.io
REPOSITORY = "$GCLOUD_PROJECT"
EOF
        cat >deployer-config.yml <<EOF
id: gke-ci
overrides:
  operation: create
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
  gke:
    gCloudProject: $GCLOUD_PROJECT
EOF
        make -C build/ci TARGET=ci-e2e ci
    """
}
