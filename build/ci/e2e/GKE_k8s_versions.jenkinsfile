pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        REGISTRY = "eu.gcr.io"
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        OPERATOR_IMAGE = "${IMAGE}"
        LATEST_RELEASED_IMG = "${IMAGE}"
    }

    stages {
        stage('Run tests for different k8s versions in GKE') {
            parallel {
                stage("1.11") {
                    environment {
                        GKE_CLUSTER_VERSION = '1.11'
                        GKE_CLUSTER_NAME = "${BUILD_TAG}-11"
                    }
                    steps {
                        checkout scm
                        sh 'make -C build/ci ci-e2e-rc'
                    }
                }
                stage("1.12") {
                    agent {
                        label 'linux'
                    }
                    environment {
                        GKE_CLUSTER_VERSION = '1.12'
                        GKE_CLUSTER_NAME = "${BUILD_TAG}-12"
                    }
                    steps {
                        checkout scm
                        sh 'make -C build/ci ci-e2e-rc'
                    }
                }
                stage("1.13") {
                    agent {
                        label 'linux'
                    }
                    environment {
                        GKE_CLUSTER_VERSION = '1.13'
                        GKE_CLUSTER_NAME = "${BUILD_TAG}-13"
                    }
                    steps {
                        checkout scm
                        sh 'make -C build/ci ci-e2e-rc'
                    }
                }
            }
        }
    }

    post {
        unsuccessful {
            script {
                def msg = "E2E tests failed!\r\n" + env.BUILD_URL
                slackSend botUser: true,
                      channel: '#cloud-k8s',
                      color: 'danger',
                      message: msg,
                      tokenCredentialId: 'cloud-ci-slack-integration-token'
            }
        }
        cleanup {
            script {
                clusters = ["${BUILD_TAG}-11", "${BUILD_TAG}-12", "${BUILD_TAG}-13"]
                for (int i = 0; i < clusters.size(); i++) {
                        build job: 'cloud-on-k8s-e2e-cleanup',
                              parameters: [string(name: 'GKE_CLUSTER', value: clusters[i])],
                              wait: false
                }
            }
            cleanWs()
        }
    }

}


