pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                checkout scm
            }
        }
        stage("Run E2E tests") {
            steps {
                sh """
                    cat >.env <<EOF
GCLOUD_PROJECT = "$GCLOUD_PROJECT"
LATEST_RELEASED_IMG = "$IMAGE"
OPERATOR_IMAGE = "$IMAGE"
REGISTRY = eu.gcr.io
REPOSITORY = "$GCLOUD_PROJECT"
IMG_SUFFIX = -ci
SKIP_DOCKER_COMMAND = true
CRD_FLAVOR = trivial-versions
EOF
                    cat >deployer-config.yml <<EOF
id: gke-ci
overrides:
  clusterName: $BUILD_TAG
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
  gke:
    gCloudProject: $GCLOUD_PROJECT
EOF
                    make -C build/ci TARGET=ci-e2e ci
                """
            }
        }
    }

    post {
        unsuccessful {
            script {
                if (params.SEND_NOTIFICATIONS) {
                    def msg = "E2E tests failed!\r\n" + env.BUILD_URL
                    slackSend botUser: true,
                        channel: '#cloud-k8s',
                        color: 'danger',
                        message: msg,
                        tokenCredentialId: 'cloud-ci-slack-integration-token'
                }
            }
        }
        cleanup {
            build job: 'cloud-on-k8s-e2e-cleanup',
                parameters: [string(name: 'GKE_CLUSTER', value: "${BUILD_TAG}")],
                wait: false
            cleanWs()
        }
    }

}
