pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        REGISTRY = "eu.gcr.io"
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        CLUSTER_VERSION = "${VERSION}"
        CLUSTER_NAME = "${BUILD_TAG}"
        OPERATOR_IMAGE = "${IMAGE}"
        LATEST_RELEASED_IMG = "${IMAGE}"
        SKIP_DOCKER_COMMAND = 'true'
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                checkout scm
            }
        }
        stage("Run E2E tests") {
            steps {
                sh """
                    cat >run-config.yml <<EOF
id: gke-ci
overrides:
  kubernetesVersion: "$CLUSTER_VERSION"
  clusterName: $CLUSTER_NAME
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
  gke:
    gCloudProject: $GCLOUD_PROJECT
EOF
                    make -C build/ci ci-e2e
                """
            }
        }
    }

    post {
        unsuccessful {
            script {
                def msg = "E2E tests failed!\r\n" + env.BUILD_URL
                slackSend botUser: true,
                      channel: '#cloud-k8s',
                      color: 'danger',
                      message: msg,
                      tokenCredentialId: 'cloud-ci-slack-integration-token'
            }
        }
        cleanup {
            build job: 'cloud-on-k8s-e2e-cleanup',
                parameters: [string(name: 'GKE_CLUSTER', value: "${CLUSTER_NAME}")],
                wait: false
            cleanWs()
        }
    }

}
