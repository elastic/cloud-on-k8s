pipeline {

    agent {
        label 'linux'
    }

    options {
        timeout(time: 150, unit: 'MINUTES')
    }

    environment {
        VAULT_ADDR = credentials('vault-addr')
        VAULT_ROLE_ID = credentials('vault-role-id')
        VAULT_SECRET_ID = credentials('vault-secret-id')
        REGISTRY = "eu.gcr.io"
        GCLOUD_PROJECT = credentials('k8s-operators-gcloud-project')
        GKE_CLUSTER_VERSION = '1.12'
        GKE_CLUSTER_NAME = "${BUILD_TAG}"
    }

    stages {
        stage('Checkout from GitHub') {
            steps {
                checkout scm
            }
        }
        stage("E2E tests") {
            when {
                expression {
                    notOnlyDocs()
                }
            }
            steps {
                sh 'make -C build/ci ci-e2e'
            }
        }
    }

    post {
        unsuccessful {
            script {
                def msg = "E2E tests failed!\r\n" + env.BUILD_URL
                slackSend botUser: true,
                      channel: '#cloud-k8s',
                      color: 'danger',
                      message: msg,
                      tokenCredentialId: 'cloud-ci-slack-integration-token'
            }
        }
        cleanup {
            script {
                if (notOnlyDocs()) {
                    build job: 'cloud-on-k8s-e2e-cleanup',
                        parameters: [string(name: 'GKE_CLUSTER', value: "${GKE_CLUSTER_NAME}")],
                        wait: false
                }
            }

            cleanWs()
        }
    }

}

def notOnlyDocs() {
    // grep succeeds if there is at least one line without docs/
    return sh (
        script: "git diff --name-status HEAD~1 HEAD | grep -v docs/",
    	returnStatus: true
    ) == 0
}
