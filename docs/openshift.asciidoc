[id="{p}-openshift"]
== Deploying ECK on OpenShift

This section explains how to run ECK on OpenShift.

NOTE: Only Elasticsearch and Kibana are supported on OpenShift.

=== Prerequisites

. To run the following instructions, you must be a `system:admin` user or a User with the privileges to create Projects, CRDs, and RBAC resources at the cluster level.

. Set virtual memory settings on the nodes
+
Before deploying an Elasticsearch cluster with ECK, make sure you correctly applied the `vm.max_map_count` setting on all the nodes of your cluster. Pods created by ECK are likely to run with the `restricted` https://docs.openshift.com/container-platform/4.1/authentication/managing-security-context-constraints.html[Secure Context Constraints] (SCC), they will run with a limited set of privileges and will not be able to change this setting on the nodes that host them. You can refer to the following https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html[documentation] for more information.

=== Deploy the operator
. Apply the all-in-one template as described in the link:k8s-quickstart.html[quickstart].
+
[source,shell]
----
oc apply -f https://download.elastic.co/downloads/eck/0.9.0/all-in-one.yaml
----

. [Optional] If the Software Defined Network is configured with the `ovs-multitenant` plug-in, you must allow the `elastic-system` namespace to access other Pods and Services in the cluster:
+
[source,shell]
----
oc adm pod-network make-projects-global elastic-system
----

. Create a namespace to hold the Elastic resources (Elasticsearch, Kibana):
+
[source,shell]
----
oc new-project elastic # creates the elastic project
----
+
By default the operator watches and creates resources in the `default` namespace. You need to patch the operator to manage resources in an other namespace.
+
[source,shell]
----
kubectl patch statefulset/elastic-operator \
  -n elastic-system \ 
  --type='json' \
  --patch '[{"op":"add","path":"/spec/template/spec/containers/0/env/-","value": {"name": "NAMESPACE", "value": "elastic"}}]'
----
+
Replace `elastic` in the examples above with the name of the namespace in which you want to deploy some resources.

. [Optional] If you want to allow an other user or a group of users to manage the Elastic resources:
+
[source,shell]
----
oc adm policy add-role-to-user elastic-operator developer -n elastic
----
+
In the example above the user `developer` is allowed to manage Elastic resources in the namespace `elastic`.

=== Deploy an Elasticsearch instance with a route

Use the following command to create an Elasticsearch cluster `elasticsearch-sample` and a "passthrough" route to access it:

[source,shell]
----
cat <<EOF | oc apply -n elastic -f -
# This sample sets up an Elasticsearch cluster with an OpenShift route
apiVersion: elasticsearch.k8s.elastic.co/v1alpha1
kind: Elasticsearch
metadata:
  name: elasticsearch-sample
spec:
  version: "7.2.0"
  setVmMaxMapCount: false
  nodes:
  - config:
      node.master: true
      node.data: true
    nodeCount: 1
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: elasticsearch-sample
spec:
  #host: elasticsearch.example.com # override if you don't want to use the host that is automatically generated by OpenShift (<route-name>[-<namespace>].<suffix>)
  tls:
    termination: passthrough # Elasticsearch is the TLS endpoint
    insecureEdgeTerminationPolicy: Redirect
  to:
    kind: Service
    name: elasticsearch-sample-es-http
EOF
----

=== Deploy a Kibana instance with a route

Use the following command to create a Kibana instance and a "passthrough" route to access it:

[source,shell]
----
cat <<EOF | oc apply -n elastic -f -
apiVersion: kibana.k8s.elastic.co/v1alpha1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: "7.2.0"
  nodeCount: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  podTemplate:
    spec:
      containers:
      - name: kibana
        resources:
          limits:
            memory: 1Gi
            cpu: 1
---
apiVersion: v1
kind: Route
metadata:
  name: kibana-sample
spec:
  #host: kibana.example.com # override if you don't want to use the host that is automatically generated by OpenShift (<route-name>[-<namespace>].<suffix>)
  tls:
    termination: passthrough # Kibana is the TLS endpoint
    insecureEdgeTerminationPolicy: Redirect
  to:
    kind: Service
    name: kibana-sample-kb-http
EOF
----

Use the following command to get the hosts of each `Route`:

[source,shell]
----
oc get route -n elastic
----
