:page_id: configure-operator-metrics
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]

[id="{p}-{page_id}"]
= Configuring the ECK Operator metrics endpoint

== Enabling the ECK Operator metrics endpoint

The ECK Operator provides a metrics endpoint that can be used to monitor the operator's performance and health. By default, the metrics endpoint is not enabled. To enable the metrics endpoint simply adjust the `metricsPort` to a value greater than 0.

== Using the ECK Operator Helm Chart

If you install ECK through the Helm chart commands listed in <<{p}-install-helm>>, you can now set `metricsPort` to a value greater than 0 and the metrics endpoint will be enabled.

== Using the ECK Operator manifests

If you install ECK through using the manifests using the commands listed in <<{p}-deploy-eck>> some additional changes will be required to enable the metrics endpoint.

* Enable the metrics endpoint in the `ConfigMap`.

[source,sh]
----
kubectl get cm elastic-operator -n elastic-system -o yaml | sed "s|metrics-port: 0|metrics-port: 8081|" | kubectl apply -f -
----

* Restart the ECK Operator

[source,sh]
----
kubectl delete pod -n elastic-system elastic-operator-0
----

== Securing the ECK Operator metrics endpoint

NOTE: The ECK Operator metrics endpoint will be secured by default in future releases (which????)

The ECK Operator provides a metrics endpoint that can be used to monitor the operator's performance and health. By default, the metrics endpoint is not enabled and is not secured. To enable the metrics endpoint follow the previous instructions. To enable TLS/HTTPs and RBAC on the metrics endpoint, you can set the `enableSecureMetrics` option to `true` in the ECK Operator configuration. When enabled, the metrics endpoint is secured with RBAC and TLS/HTTPs.

== Using the ECK Operator Helm Chart

If you install ECK through the Helm chart commands listed in <<{p}-install-helm>>, you can now set `enableSecureMetrics` and both RBAC and TLS/HTTPs will be enabled for the metrics endpoint.

== Using the ECK Operator manifests

If you install ECK through using the manifests using the commands listed in <<{p}-deploy-eck>> some additional changes will be required to enable secure metrics.

* Enable the metrics endpoint in the `ConfigMap`.

[source,sh]
----
kubectl get cm elastic-operator -n elastic-system -o yaml | sed "s|metrics-port: 0|metrics-port: 8081|" | sed "s|metrics-host: 0.0.0.0|metrics-host: 127.0.0.1|" | kubectl apply -f -
----

* Add `ClusterRole` and `ClusterRoleBinding` for the ECK Operator.

[source,shell,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elastic-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: elastic-operator
  namespace: elastic-system
EOF
----

* Add a `Service` to expose the metrics endpoint.

[source,shell,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: elastic-operator
    app.kubernetes.io/component: metrics
  name: elastic-operator-metrics
  namespace: elastic-system
spec:
  ports:
  - name: https
    port: 8080
    protocol: TCP
    targetPort: metrics
  selector:
    control-plane: elastic-operator
EOF
----

* Patch the `StatefulSet`

[source,shell,subs="attributes,+macros"]
----
kubectl patch sts -n elastic-system elastic-operator --patch-file=/dev/stdin <<-EOF
spec:
  template:
    spec:
      containers:
        - name: kube-rbac-proxy
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
          image: gcr.io/kubebuilder/kube-rbac-proxy:v0.15.0
          args:
          - "--secure-listen-address=0.0.0.0:8080"
          - "--upstream=http://127.0.0.1:8081"
          - "--logtostderr=true"
          - "--v=0"
          ports:
          - containerPort: 8080
            protocol: TCP
            name: metrics
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
EOF
----

* Add a `ServiceMonitor` to allow scraping of the metrics endpoint by Prometheus.

[source,shell,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: elastic-operator
  namespace: elastic-system
spec:
  namespaceSelector:
    matchNames:
      - elastic-system
  selector:
    matchLabels:
      control-plane: elastic-operator
      app.kubernetes.io/component: metrics
  endpoints:
  - port: https
    path: /metrics
    scheme: https
    interval: 30s
    tlsConfig:
      insecureSkipVerify: true
    bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
EOF
----

== Prometheus requirements

This option requires the following settings within Prometheus to function:

1. RBAC settings for the Prometheus instance to access the metrics endpoint similar to the following:

[source,yaml,subs="attributes"]
----
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
----

NOTE: If using the Prometheus Operator and your Prometheus instance is not in the same namespace as the operator you will need the Prometheus Operator configured with the following Helm values:

[source,yaml,subs="attributes"]
----
prometheus:
  prometheusSpec:
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
----

== Bringing your own TLS certificate to secure the metrics endpoint

TODO: 
