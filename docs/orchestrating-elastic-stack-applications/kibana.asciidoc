:page_id: kibana
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run Kibana on ECK

The <<{p}-deploy-kibana,quickstart>> is a good starting point to quickly setup a Kibana instance with ECK.
The following sections describe how to customize a Kibana deployment to suit your requirements.

* <<{p}-kibana-es,Connect to an Elasticsearch cluster>>
** <<{p}-kibana-eck-managed-es,Connect to an Elasticsearch cluster managed by ECK>>
** <<{p}-kibana-external-es,Connect to an Elasticsearch cluster not managed by ECK>>
* <<{p}-kibana-advanced-configuration,Advanced configuration>>
** <<{p}-kibana-pod-configuration,Pod Configuration>>
** <<{p}-kibana-configuration,Kibana Configuration>>
** <<{p}-kibana-scaling,Scaling out a Kibana deployment>>
* <<{p}-kibana-secure-settings,Secure settings>>
* <<{p}-kibana-http-configuration,HTTP Configuration>>
** <<{p}-kibana-http-publish,Load balancer settings and TLS SANs>>
** <<{p}-kibana-http-custom-tls,Provide your own certificate>>
** <<{p}-kibana-http-disable-tls,Disable TLS>>
** <<{p}-kibana-plugins>>

[id="{p}-kibana-es"]
== Connect to an Elasticsearch cluster

You can connect an Elasticsearch cluster that is either managed by ECK or not managed by ECK. 


[id="{p}-kibana-eck-managed-es"]
=== Elasticsearch is managed by ECK

It is quite straightforward to connect a Kibana instance to an Elasticsearch cluster managed by ECK:

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
    namespace: default
----

The use of `namespace` is optional if the Elasticsearch cluster is running in the same namespace as Kibana. An additional `serviceName` attribute can be specified to target a custom Kubernetes service.
Refer to <<{p}-traffic-splitting>> for more information.

NOTE: Any Kibana can reference (and thus access) any Elasticsearch instance as long as they are both in namespaces that are watched by the same ECK instance. ECK will copy the required Secret from Elasticsearch to Kibana namespace. Kibana cannot automatically connect to Elasticsearch (through `elasticsearchRef`) in a namespace managed by a different ECK instance. For more information, check <<{p}-restrict-cross-namespace-associations,Restrict cross-namespace resource associations>>.

The Kibana configuration file is automatically setup by ECK to establish a secure connection to Elasticsearch.

[id="{p}-kibana-external-es"]
=== Elasticsearch is not managed by ECK

You can also configure Kibana to connect to an Elasticsearch cluster that is managed by a different installation of ECK, or runs outside the Kubernetes cluster. In this case, you need the IP address or URL of the Elasticsearch cluster and a valid username and password pair to access the cluster.

Use the <<{p}-kibana-secure-settings,secure settings>> mechanism to securely store the credentials of the external Elasticsearch cluster:

[source,shell]
----
kubectl create secret generic kibana-elasticsearch-credentials --from-literal=elasticsearch.password=$PASSWORD
----

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  config:
    elasticsearch.hosts:
      - https://elasticsearch.example.com:9200
    elasticsearch.username: elastic
  secureSettings:
    - secretName: kibana-elasticsearch-credentials
----


If the external Elasticsearch cluster is using a self-signed certificate, create a Kubernetes Secret containing the CA certificate and mount it to the Kibana container as follows:

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  config:
    elasticsearch.hosts:
      - https://elasticsearch-sample-es-http:9200
    elasticsearch.username: elastic
    elasticsearch.ssl.certificateAuthorities: /etc/certs/ca.crt
  secureSettings:
    - secretName: kibana-elasticsearch-credentials
  podTemplate:
    spec:
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: elasticsearch-certs-secret
      containers:
        - name: kibana
          volumeMounts:
            - name: elasticsearch-certs
              mountPath: /etc/certs
              readOnly: true
----


[id="{p}-kibana-advanced-configuration"]
== Advanced configuration

If you already looked at the <<{p}-elasticsearch-specification,Elasticsearch on ECK>> documentation, some of these concepts might sound familiar to you.
The resource definitions in ECK share the same philosophy when you want to:

* Customize the Pod configuration
* Customize the product configuration
* Manage HTTP settings
* Use secure settings

[id="{p}-kibana-pod-configuration"]
=== Pod configuration
You can <<{p}-customize-pods,customize the Kibana Pod>> using a Pod template.

The following example demonstrates how to create a Kibana deployment with custom node affinity, increased heap size, and resource limits.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  podTemplate:
    spec:
      containers:
      - name: kibana
        env:
          - name: NODE_OPTIONS
            value: "--max-old-space-size=2048"
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2.5Gi
            cpu: 2
      nodeSelector:
        type: frontend
----

The name of the container in the Pod template must be `kibana`.

Check <<{p}-compute-resources-kibana-and-apm>> for more information.

[id="{p}-kibana-configuration"]
=== Kibana configuration
You can add your own Kibana settings to the `spec.config` section.

The following example demonstrates how to set the `elasticsearch.requestHeadersWhitelist` configuration option.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  config:
     elasticsearch.requestHeadersWhitelist:
     - authorization
----

[id="{p}-kibana-scaling"]
=== Scale out a Kibana deployment

To deploy more than one instance of Kibana, all the instances must share a same set of encryption keys. The following keys are automatically generated by the operator:

* `xpack.security.encryptionKey`
* `xpack.reporting.encryptionKey`
* `xpack.encryptedSavedObjects.encryptionKey`

You can provide your own encryption keys using a secure setting, as described in <<{p}-kibana-secure-settings,Secure settings>>.

NOTE: While most reconfigurations of your Kibana instances are carried out in rolling upgrade fashion, all version upgrades will cause Kibana downtime. This happens because you can only run a single version of Kibana at any given time. For more information, check link:https://www.elastic.co/guide/en/kibana/current/upgrade.html[Upgrade Kibana].

[id="{p}-kibana-secure-settings"]
== Secure settings

<<{p}-es-secure-settings,Similar to Elasticsearch>>, you can use Kubernetes secrets to manage secure settings for Kibana.

For example, you can define a custom encryption key for Kibana as follows:

. Create a secret containing the desired setting:
+
[source,yaml,subs="attributes"]
----
kubectl create secret generic kibana-secret-settings \
 --from-literal=xpack.security.encryptionKey=94d2263b1ead716ae228277049f19975aff864fb4fcfe419c95123c1e90938cd
----
+
. Add a reference to the secret in the `secureSettings` section:
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 3
  elasticsearchRef:
    name: "elasticsearch-sample"
  secureSettings:
  - secretName: kibana-secret-settings
----

[id="{p}-kibana-http-configuration"]
== HTTP configuration

[id="{p}-kibana-http-publish"]
=== Load balancer settings and TLS SANs

By default a `ClusterIP` link:https://kubernetes.io/docs/concepts/services-networking/service/[service] is created and associated with the Kibana deployment.
If you want to expose Kibana externally with a link:https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer[load balancer], it is recommended to include a custom DNS name or IP in the self-generated certificate.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    service:
      spec:
        type: LoadBalancer # default is ClusterIP
    tls:
      selfSignedCertificate:
        subjectAltNames:
        - ip: 1.2.3.4
        - dns: kibana.example.com
----

[id="{p}-kibana-http-custom-tls"]
=== Provide your own certificate

If you want to use your own certificate, the required configuration is identical to Elasticsearch. Check <<{p}-custom-http-certificate>>.

[id="{p}-kibana-http-disable-tls"]
=== Disable TLS

You can disable the generation of the self-signed certificate and hence disable TLS.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    tls:
      selfSignedCertificate:
        disabled: true
----

[id="{p}-kibana-plugins"]
== Install Kibana plugins

You can override the Kibana container image to use your own image with the plugins already installed, as described in the <<{p}-custom-images,Create custom images>>. You should run an `optimize` step as part of the build, otherwise it needs to run at startup which requires additional time and resources. 

This is a Dockerfile example:

[subs="attributes"]
----
FROM docker.elastic.co/kibana/kibana:{version}
RUN /usr/share/kibana/bin/kibana-plugin install $PLUGIN_URL
RUN /usr/share/kibana/bin/kibana --optimize
----
