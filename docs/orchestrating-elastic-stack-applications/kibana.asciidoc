:page_id: kibana
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run Kibana on ECK

The <<{p}-deploy-kibana,quickstart>> is a good starting point to quickly setup a Kibana instance with ECK.
The following sections describe how to customize a Kibana deployment to suit your requirements.

* <<{p}-kibana-eck-managed-es,Use an Elasticsearch cluster managed by ECK>>
* <<{p}-kibana-external-es,Connect to an Elasticsearch cluster not managed by ECK>>
* <<{p}-kibana-advanced-configuration,Advanced configuration>>
** <<{p}-kibana-pod-configuration,Pod Configuration>>
** <<{p}-kibana-configuration,Kibana Configuration>>
** <<{p}-kibana-scaling,Scaling out a Kibana deployment>>
* <<{p}-kibana-secure-settings,Secure settings>>
* <<{p}-kibana-http-configuration,HTTP Configuration>>
** <<{p}-kibana-http-publish,Load balancer settings and TLS SANs>>
** <<{p}-kibana-http-custom-tls,Provide your own certificate>>
** <<{p}-kibana-http-disable-tls,Disable TLS>>


[id="{p}-kibana-eck-managed-es"]
== Use an Elasticsearch cluster managed by ECK

It is quite straightforward to connect a Kibana instance to an Elasticsearch cluster managed by ECK:

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
    namespace: default
----

NOTE: `namespace` is optional if the Elasticsearch cluster is running in the same namespace as Kibana.

NOTE: Any Kibana can reference (and thus access) any Elasticsearch instance as long as they both are in namespaces that are watched by the same ECK instance. ECK will copy the required `Secret` from Elasticsearch to Kibana namespace. If this behavior is not desired, more than one ECK instance can be deployed. Kibana won't be able to automatically connect to Elasticsearch (through `elasticsearchRef`) in a namespace managed by a different ECK instance.

The Kibana configuration file is automatically setup by ECK to establish a secure connection to Elasticsearch.

[id="{p}-kibana-external-es"]
== Connect to an Elasticsearch cluster not managed by ECK

It is also possible to configure Kibana to connect to an Elasticsearch cluster that is being managed by a different installation of ECK or running outside the Kubernetes cluster. In this case, you need to know the IP address or URL of the Elasticsearch cluster and a valid username and password pair to access the cluster.

Use the <<{p}-kibana-secure-settings,secure settings>> mechanism to securely store the credentials of the external Elasticsearch cluster:

[source,shell]
----
kubectl create secret generic kibana-elasticsearch-credentials --from-literal=elasticsearch.password=$PASSWORD
----

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  config:
    elasticsearch.hosts:
      - https://elasticsearch.example.com:9200
    elasticsearch.username: elastic
  secureSettings:
    - secretName: kibana-elasticsearch-credentials
----


If the external Elasticsearch cluster is using a self-signed certificate, create a Kubernetes secret containing the CA certificate and mount it to the Kibana container as follows:

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  config:
    elasticsearch.hosts:
      - https://elasticsearch-sample-es-http:9200
    elasticsearch.username: elastic
    elasticsearch.ssl.certificateAuthorities: /etc/certs/ca.crt
  secureSettings:
    - secretName: kibana-elasticsearch-credentials
  podTemplate:
    spec:
      volumes:
        - name: elasticsearch-certs
          secret:
            secretName: elasticsearch-certs-secret
      containers:
        - name: kibana
          volumeMounts:
            - name: elasticsearch-certs
              mountPath: /etc/certs
              readOnly: true
----


[id="{p}-kibana-advanced-configuration"]
== Advanced configuration

If you already looked at the Elasticsearch on ECK documentation, then concepts and ideas described here might sound familiar to you.
This is because the resource definitions in ECK share the same philosophy when it comes to:

* Customizing the Pod configuration
* Customizing the product configuration
* Managing HTTP settings
* Using secure settings

[id="{p}-kibana-pod-configuration"]
=== Pod Configuration
You can define a <<{p}-pod-template,pod template>> to customize the Kibana pod and override any configuration values.

The following example demonstrates how to create a Kibana deployment with custom node affinity and resource limits.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  podTemplate:
    spec:
      containers:
      - name: kibana
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2Gi
            cpu: 2
      nodeSelector:
        type: frontend
----

NOTE: The name of the container in the pod template must be `kibana`.

See <<{p}-compute-resources-kibana-and-apm>> for more information.

[id="{p}-kibana-configuration"]
=== Kibana Configuration
You can add your own Kibana settings to the `spec.config` section.

The following example demonstrates how to set the `elasticsearch.requestHeadersWhitelist` configuration option:

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  config:
     elasticsearch.requestHeadersWhitelist:
     - authorization
----

[id="{p}-kibana-scaling"]
== Scale out a Kibana deployment

You may want to deploy more than one instance of Kibana. In this case all the instances must share the same encryption key. If you do not set one, the operator will generate one for you. If you would like to set your own encryption key, this can be done by setting the `xpack.security.encryptionKey` property using a secure setting as described in the next section.

Note that while most reconfigurations of your Kibana instances will be carried out in rolling upgrade fashion, all version upgrades will cause Kibana downtime. This is due to the link:https://www.elastic.co/guide/en/kibana/current/upgrade.html[requirement] to run only a single version of Kibana at any given time.

[id="{p}-kibana-secure-settings"]
== Secure Settings

<<{p}-es-secure-settings,Similar to Elasticsearch>>, you can use Kubernetes secrets to manage secure settings for Kibana as well.

For example, you can define a custom encryption key for Kibana as follows:

. Create a secret containing the desired setting:
+
[source,yaml,subs="attributes"]
----
kubectl create secret generic kibana-secret-settings \
 --from-literal=xpack.security.encryptionKey=94d2263b1ead716ae228277049f19975aff864fb4fcfe419c95123c1e90938cd
----
+
. Add a reference to the secret in the `secureSettings` section:
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 3
  elasticsearchRef:
    name: "elasticsearch-sample"
  secureSettings:
  - secretName: kibana-secret-settings
----

[id="{p}-kibana-http-configuration"]
== HTTP Configuration

[id="{p}-kibana-http-publish"]
=== Load balancer settings and TLS SANs

By default a `ClusterIP` link:https://kubernetes.io/docs/concepts/services-networking/service/[service] is created and associated with the Kibana deployment.
You may want to expose Kibana externally with a link:https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer[load balancer].
In which case you may also want to include a custom DNS name or IP in the self-generated certificate.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    service:
      spec:
        type: LoadBalancer # default is ClusterIP
    tls:
      selfSignedCertificate:
        subjectAltNames:
        - ip: 1.2.3.4
        - dns: kibana.example.com
----

[id="{p}-kibana-http-custom-tls"]
=== Provide your own certificate

If you want to use your own certificate, the required configuration is identical to Elasticsearch.  See: <<{p}-custom-http-certificate>>.

[id="{p}-kibana-http-disable-tls"]
=== Disable TLS

You can disable the generation of the self-signed certificate and hence disable TLS.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    tls:
      selfSignedCertificate:
        disabled: true
----
