:page_id: enterprise-search
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run Enterprise Search on ECK

This section describes how to deploy, configure and access Enterprise Search with ECK.

* <<{p}-enterprise-search-quickstart>>
* <<{p}-enterprise-search-configuration>>
* <<{p}-enterprise-search-troubleshoot>>

[id="{p}-enterprise-search-quickstart"]
== Quickstart

. Apply the following specification to deploy Enterprise Search. ECK automatically configures the secured connection to an Elasticsearch cluster named `quickstart`, created in link:k8s-quickstart.html[Elasticsearch quickstart].
+
[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: enterprisesearch.k8s.elastic.co/v1
kind: EnterpriseSearch
metadata:
  name: enterprise-search-quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
EOF
----
NOTE: Workplace Search in versions 7.7 up to and including 7.8 required an Enterprise license on ECK. You can start with a 30-day <<{p}-licensing,trial license>>.
. Monitor the Enterprise Search deployment.
+
Retrieve details about the Enterprise Search deployment:
+
[source,sh]
----
kubectl get enterprisesearch
----
+
[source,sh,subs="attributes"]
----
NAME                            HEALTH    NODES    VERSION   AGE
enterprise-search-quickstart    green     1        {version}      8m
----
+
List all the Pods belonging to a given deployment:
+
[source,sh]
----
kubectl get pods --selector='enterprisesearch.k8s.elastic.co/name=enterprise-search-quickstart'
----
+
[source,sh]
----
NAME                                                READY   STATUS    RESTARTS   AGE
enterprise-search-quickstart-ent-58b84db85-dl7c6    1/1     Running   0          2m50s
----
+
. Access logs for that Pod:
+
[source,sh]
----
kubectl logs -f enterprise-search-quickstart-ent-58b84db85-dl7c6
----

. Access Enterprise Search.
+
A ClusterIP Service is automatically created for the deployment, and can be used to access the Enterprise Search API from within the Kubernetes cluster:
+
[source,sh]
----
kubectl get service enterprise-search-quickstart-ent-http
----
+
Use `kubectl port-forward` to access Enterprise Search from your local workstation:
+
[source,sh]
----
kubectl port-forward service/enterprise-search-quickstart-ent-http 3002
----
+
Open `https://localhost:3002` in your browser.
+
NOTE: Your browser will show a warning because the self-signed certificate configured by default is not verified by a known certificate authority and not trusted by your browser. Acknowledge the warning for the purposes of this quickstart, but for a production deployment we recommend <<{p}-enterprise-search-expose,configuring valid certificates>>.
+
Login as the `elastic` user created link:k8s-quickstart.html[with the Elasticsearch cluster]. Its password can be obtained with:
+
[source,sh]
----
kubectl get secret quickstart-es-elastic-user -o=jsonpath='{.data.elastic}' | base64 --decode; echo
----

. Access the Enterprise Search UI in Kibana.
+
Starting with version 7.14.0, the Enterprise Search UI is accessible in Kibana.
+
Apply the following specification to deploy Kibana, configured to connect to both Elasticsearch and Enterprise Search:
+
[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
  enterpriseSearchRef:
    name: enterprise-search-quickstart
EOF
----
+
Use `kubectl port-forward` to access Kibana from your local workstation:
+
[source,sh]
----
kubectl port-forward service/quickstart-kb-http 5601
----
+
Open `https://localhost:5601` in your browser and navigate to the Enterprise Search UI.

[id="{p}-enterprise-search-configuration"]
== Configuration

[id="{p}-enterprise-search-upgrade-specification"]
=== Upgrade the Enterprise Search specification

You can upgrade the Enterprise Search version or change settings by editing the YAML specification. ECK will apply the changes by performing a rolling restart of Enterprise Search pods.

[id="{p}-enterprise-search-custom-configuration"]
=== Customize Enterprise Search configuration

ECK sets up a default Enterprise Search link:https://www.elastic.co/guide/en/enterprise-search/current/configuration.html#configuration[configuration]. To customize it, use the `config` element in the specification.

At a minimum, you must set both `ent_search.external_url` and `kibana.host` to the desired URLs.

[source,yaml,subs="attributes"]
----
apiVersion: enterprisesearch.k8s.elastic.co/v1
kind: EnterpriseSearch
metadata:
  name: enterprise-search-quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
  config:
    # define the exposed URL at which users will reach Enterprise Search
    ent_search.external_url: https://my-custom-domain:3002
    # define the exposed URL at which users will reach Kibana
    kibana.host: https://kibana.my-custom-domain:5601
    # configure app search document size limit
    app_search.engine.document_size.limit: 100kb
----

[id="{p}-enterprise-search-secret-configuration"]
=== Reference Kubernetes Secrets for sensitive settings

Sensitive settings are best stored in Kubernetes Secrets, referenced in the Enterprise Search specification.

This example sets up a Secret with SMTP credentials:

[source,yaml,subs="attributes"]
----
apiVersion: enterprisesearch.k8s.elastic.co/v1
kind: EnterpriseSearch
metadata:
  name: enterprise-search-quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
  config:
    ent_search.external_url: https://my-custom-domain:3002
    kibana.host: https://kibana.my-custom-domain:5601
  configRef:
    secretName: smtp-credentials
---
kind: Secret
apiVersion: v1
metadata:
  name: smtp-credentials
stringData:
  enterprise-search.yml: |-
    email.account.enabled: true
    email.account.smtp.auth: plain
    email.account.smtp.starttls.enable: false
    email.account.smtp.host: 127.0.0.1
    email.account.smtp.port: 25
    email.account.smtp.user: myuser
    email.account.smtp.password: mypassword
    email.account.email_defaults.from: my@email.com
----

ECK merges the content of `config` and `configRef` into a single internal Secret. In case of duplicate settings, the `configRef` secret has precedence.

[id="{p}-enterprise-search-custom-pod-template"]
=== Customize the Pod template

You can override the Enterprise Search Pod's specification through the `podTemplate` element.

This example overrides the default 4Gi deployment to use 8Gi instead, and makes the deployment highly-available with 3 Pods:

[source,yaml,subs="attributes"]
----
apiVersion: enterprisesearch.k8s.elastic.co/v1
kind: EnterpriseSearch
metadata:
  name: enterprise-search-quickstart
spec:
  version: {version}
  count: 3
  elasticsearchRef:
    name: quickstart
  podTemplate:
    spec:
      containers:
      - name: enterprise-search
        resources:
          requests:
            cpu: 3
            memory: 8Gi
          limits:
            memory: 8Gi
        env:
        - name: JAVA_OPTS
          value: -Xms7500m -Xmx7500m
----

[id="{p}-enterprise-search-custom-pod-template-security-context"]
==== Customize the Pod template security context

The Enterprise Search Pod's security context can be customized through the `podTemplate` element.
However, if `readOnlyRootFilesystem` is set to `true` without additional configuration, the Pod will fail to start.
This happens because Enterprise Search (a Ruby service) requires write access to certain directories within `/usr/share/enterprise-search`, which include WAR files and configurations.

To work around this, use an init container to copy the necessary WAR files to a temporary writable location, before starting the Enterprise Search container with mounted writable volumes.
Having the temporary directories (`/tmp`) in-memory also ensures Ruby has a temporary directory to work with during startup.

This example demonstrates the workaround:

[source,yaml,subs="attributes,callouts"]
----
apiVersion: enterprisesearch.k8s.elastic.co/v1
kind: EnterpriseSearch
metadata:
  name: testing
spec:
  version: {version}
  image: docker.elastic.co/enterprise-search/enterprise-search:{version}
  count: 1
  elasticsearchRef:
    name: testing
  podTemplate:
    spec:
      containers:
        - name: enterprise-search
          image: docker.elastic.co/enterprise-search/enterprise-search:{version}
          securityContext: <1>
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            runAsUser: 1000 <2>
          volumeMounts: <3>
          - name: search-tmp
            mountPath: /usr/share/enterprise-search/tmp
          - name: tmp
            mountPath: /tmp
          - name: filebeat-data
            mountPath: /usr/share/enterprise-search/filebeat/data
          - name: war-files
            mountPath: /usr/share/enterprise-search/lib/war
          resources:
            requests:
              cpu: 3
              memory: 8Gi
            limits:
              memory: 8Gi
          env: <4>
          - name: JAVA_OPTS
            value: -Xms7500m -Xmx7500m
      initContainers: <5>
      - name: init-war-dir
        image: docker.elastic.co/enterprise-search/enterprise-search:{version}
        command: ['sh', '-c', 'cp --verbose -r /usr/share/enterprise-search/lib/war/. /usr/share/enterprise-search-war-tmp']
        volumeMounts:
        - name: war-files
          mountPath: /usr/share/enterprise-search-war-tmp
      volumes: <6>
      - name: war-files
        emptyDir: {}
      - name: filebeat-data
        emptyDir: {}
      - name: search-tmp
        emptyDir:
          medium: Memory
      - name: tmp
        emptyDir:
          medium: Memory
----

<1> Adds a security context to define permissions and access control settings for the `enterprise-search` container.
<2> Sets the user to random UID `1000` to run the container as a non-root user.
<3> Adds volume mounts for `search-tmp`, `tmp`, `filebeat-data`, and `war-files` to the `enterprise-search` container.
<4> Adds the variable `JAVA_OPTS` to pass options and configurations to the Java Virtual Machine (JVM).
<5> Adds an init container to copy WAR files to a temporary location.
<6> Adds volumes for WAR files and adds volumes with in-memory storage for `search-tmp` and `tmp`.

[id="{p}-enterprise-search-expose"]
=== Expose Enterprise Search

By default ECK manages self-signed TLS certificates to secure the connection to Enterprise Search. It also restricts the Kubernetes service to `ClusterIP` type that cannot be accessed publicly.

Check link:k8s-accessing-elastic-services.html[how to access Elastic Stack services] to customize TLS settings and expose the service.

NOTE: When exposed outside the scope of `localhost`, make sure to set both `ent_search.external_url`, and `kibana.host` accordingly in the Enterprise Search configuration.

[id="{p}-enterprise-search-connect-es"]
=== Customize the connection to an Elasticsearch cluster

The `elasticsearchRef` element allows ECK to automatically configure Enterprise Search to establish a secured connection to a managed Elasticsearch cluster. By default it targets all nodes in your cluster. If you want to direct traffic to specific nodes of your Elasticsearch cluster, refer to <<{p}-traffic-splitting>> for more information and examples.


[id="{p}-enterprise-search-connect-non-eck-es"]
=== Connect to an external Elasticsearch cluster

==== Automatically

Refer to <<{p}-connect-to-unmanaged-resources>> to automatically configure Enterprise Search using connection settings from a `Secret`.

==== Manually
If you do not want to use the `elasticsearchRef` mechanism you can manually configure Enterprise Search to access any available Elasticsearch cluster:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: enterprisesearch.k8s.elastic.co/v1
kind: EnterpriseSearch
metadata:
  name: enterprise-search-quickstart
spec:
  version: {version}
  count: 1
  configRef:
    secretName: elasticsearch-credentials
---
kind: Secret
apiVersion: v1
metadata:
  name: elasticsearch-credentials
stringData:
  enterprise-search.yml: |-
    elasticsearch.host: https://elasticsearch-url:9200
    elasticsearch.username: elastic
    elasticsearch.password: my-password
    elasticsearch.ssl.enabled: true
----

[id="{p}-enterprise-search-troubleshoot"]
== Troubleshooting

[id="{p}-enterprise-search-jvm-heap-dump"]
=== Capture a JVM heap dump

For advanced troubleshooting you might need to capture a JVM heap dump. By default, the Enterprise Search Docker image is not configured to run with a data volume by the ECK operator. However, you can write a heap dump to the `tmp` directory that Enterprise Search uses. Note that your heap dump will be lost if you do not extract it before the container restarts.


[source,sh,subs="attributes,+macros"]
----
kubectl exec $POD_NAME -- bash -c \
  'jmap -dump:format=b,file=tmp/heap.hprof $(jps| grep Main | cut -f 1 -d " ")'

# The Enterprise Search Docker images don't have tar installed so we cannot use kubectl cp
kubectl exec $POD_NAME -- cat /usr/share/enterprise-search/tmp/heap.hprof | gzip -c > heap.hprof.gz

# Remove the heap dump from the running container to free up space
kubectl exec $POD_NAME -- rm /usr/share/enterprise-search/tmp/heap.hprof
----
