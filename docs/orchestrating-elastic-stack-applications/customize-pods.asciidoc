:page_id: customize-pods
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Customize Pods

You can customize the Pods created for each Elastic stack application by modifying the respective `podTemplate` field in the manifest. Pod templates allow you to define labels, annotations, environment variables, volume mounts, and other custom configuration settings that are then merged with the default Pod configuration generated by ECK to produce the final Pod definition that gets deployed to the Kubernetes cluster.


The following example illustrates how to add a custom label, annotation, and an environment variable using the `podTemplate` field.

.Elasticsearch
[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: quickstart
spec:
  version: {version}
  nodeSets:
  - name: default
    count: 1
    podTemplate:
      metadata:
        labels:
          my.custom.domain/label: "label-value"
        annotations:
          my.custom.domain/annotation: "annotation-value"
      spec:
        containers:
          - name: elasticsearch
            env:
              - name: ES_JAVA_OPTS
                value: "-Xms4g -Xmx4g"
----

.Kibana
[source,yaml,subs="attributes,callouts"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: quickstart
spec:
  version: {version}
  count: 1
  podTemplate:
    metadata:
      labels:
        my.custom.domain/label: "label-value"
      annotations:
        my.custom.domain/annotation: "annotation-value"
    spec:
      containers:
        - name: kibana
          env:
            - name: NODE_OPTIONS
              value:  "--max-old-space-size=2048"
----

NOTE: Configuration for other Elastic stack applications, like APM Server, Enterprise Search or Beats, is identical to the Kibana configuration except for the `apiVersion` and `kind` fields.

The following example shows how it's also possible to customize the init containers created as part of the Pods to initialize the filesystem or to manage the keystores.

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: quickstart
spec:
  version: {version}
  nodeSets:
    - name: default
      count: 3
      podTemplate:
        spec:
          initContainers:
          - name: elastic-internal-init-keystore
            resources: # override the default resources set by the operator
              limits:
                cpu: 1000m
                memory: 368Mi
              requests:
                cpu: 1000m
                memory: 368Mi
  secureSettings:
  - secretName: es-secret
----

[float]
== More examples

- <<{p}-init-containers-plugin-downloads>>
- <<{p}-managing-compute-resources>>

For further information:

- https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#pod-templates[Pod templates overview]
- https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podtemplatespec-v1-core[Pod template spec API reference]
