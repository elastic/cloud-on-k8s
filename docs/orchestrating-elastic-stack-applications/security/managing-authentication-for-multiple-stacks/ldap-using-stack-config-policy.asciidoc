:parent_page_id: auth-config-using-stack-config-policy
:page_id: ldap-using-stack-config-policy
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{parent_page_id}.html#k8s-{page_id}[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= LDAP using Elastic stack configuration policy

NOTE: This requires a valid Enterprise license or Enterprise trial license. Check <<{p}-licensing,the license documentation>> for more details about managing licenses.

TIP: Make sure you check the complete link:https://www.elastic.co/guide/en/elasticsearch/reference/current/ldap-realm.html[guide to setting up LDAP with Elasticsearch].

== To configure LDAP using Elastic Stack configuration policy with user search:

. Add a realm configuration to the `config` field under `elasticsearch` in the `xpack.security.authc.realms.ldap` namespace. At a minimum, you must specify the URL of the LDAP server and the order of the LDAP realm compared to other configured security realms. You also have to set `user_search.base_dn` to the container DN where the users are searched for. Refer to link:https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#ref-ldap-settings[LDAP realm settings] for all of the options you can set for an LDAP realm.
For example, the following snippet shows an LDAP realm configured with a user search:

+
[source,yaml,subs="attributes,+macros"]
----
elasticsearch:
  config:
    xpack.security.authc.realms:
      ldap:
        ldap1:
          order: 0
          url: "ldap://openldap.default.svc.cluster.local:1389"
          bind_dn: "cn=admin,dc=example,dc=org"
          user_search:
            base_dn: "dc=example,dc=org"
            filter: "(cn={0})"
          group_search:
            base_dn: "dc=example,dc=org"
          unmapped_groups_as_roles: false
----

. The password for the `bind_dn` user should be configured by adding the appropriate `secure_bind_password` setting to the Elasticsearch keystore. This can be done using the Elastic Stack configuration policy by following the below steps:

  .. Create a secret that has the `secure_bind_password` in the same namespace as the operator
+
[source,sh]
----
  kubectl create secret generic ldap-secret --from-literal=xpack.security.authc.realms.ldap.ldap1.secure_bind_password=<password>
----

    .. Add the secret name to the `secureSettings` field under `elasticsearch` in the Elastic Stack configuration policy
+
[source,yaml,subs="attributes,+macros"]
----
  spec:
    resourceSelector:
      matchLabels:
        env: my-label
    elasticsearch:
      secureSettings:
      - secretName: ldap-secret
----

. Map LDAP groups to roles. In the below example, LDAP users get the Elasticsearch `superuser` role. `dn: "cn=users,dc=example,dc=org"` is the LDAP distinguished name (DN) of the users group.
+
[source,yaml,subs="attributes,+macros"]
----
securityRoleMappings:
  ldap_role:
    roles: [ "superuser" ]
    rules:
      all:
        - field: { realm.name: "ldap1" }
        - field: { dn: "cn=users,dc=example,dc=org" }
    enabled: true
----

Simple full example Elastic Stack config policy to configure LDAP realm with user search

[source,yaml,subs="attributes,+macros"]
----
apiVersion: stackconfigpolicy.k8s.elastic.co/v1alpha1
kind: StackConfigPolicy
metadata:
  name: test-stack-config-policy
spec:
  resourceSelector:
    matchLabels:
      env: my-label
  elasticsearch:
    secureSettings:
    - secretName: ldap-secret
    securityRoleMappings:
      ldap_role:
        roles: [ "superuser" ]
        rules:
          all:
            - field: { realm.name: "ldap1" }
            - field: { dn: "cn=users,dc=example,dc=org" }
        enabled: true
    config:
      xpack.security.authc.realms:
        ldap:
          ldap1:
            order: 0
            url: "ldap://openldap.default.svc.cluster.local:1389"
            bind_dn: "cn=admin,dc=example,dc=org"
            user_search:
              base_dn: "dc=example,dc=org"
              filter: "(cn={0})"
            group_search:
              base_dn: "dc=example,dc=org"
            unmapped_groups_as_roles: false
----

== To configure an LDAP realm with user DN templates:

Add a realm configuration to `elasticsearch.yml` in the xpack.security.authc.realms.ldap namespace. At a minimum, you must specify the url and order of the LDAP server, and specify at least one template with the user_dn_templates option. Check link:https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#ref-ldap-settings[LDAP realm settings]  for all of the options you can set for an ldap realm.

For example, the following snippet shows an LDAP realm configured with user DN templates:

[source,yaml,subs="attributes,+macros"]
----
xpack:
  security:
    authc:
      realms:
        ldap:
          ldap1:
            order: 0
            url: "ldaps://ldap.example.com:636"
            user_dn_templates:
              - "cn={0}, ou=users, dc=example, dc=org"
            group_search:
              base_dn: "dc=example,dc=org"
            unmapped_groups_as_roles: false
----

Example Elastic Stack config policy to configure LDAP realm with user DN templates:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: stackconfigpolicy.k8s.elastic.co/v1alpha1
kind: StackConfigPolicy
metadata:
  name: test-stack-config-policy
spec:
  resourceSelector:
    matchLabels:
      env: my-label
  elasticsearch:
    securityRoleMappings:
      ldap_role:
        roles: [ "superuser" ]
        rules:
          all:
            - field: { realm.name: "ldap1" }
            - field: { dn: "*,ou=users,dc=example,dc=org" }
        enabled: true
    config:
      xpack.security.authc.realms:
        ldap:
          ldap1:
            order: 0
            url: "ldaps://ldap.example.com:636"
            user_dn_templates:
              - "cn={0}, ou=users, dc=example, dc=org"
            group_search:
              base_dn: "dc=example,dc=org"
            unmapped_groups_as_roles: false
----

The `bind_dn` setting is not used in template mode. All LDAP operations run as the authenticating user. So there is no need of setting up any additional secrets to be stored in the keystore.

