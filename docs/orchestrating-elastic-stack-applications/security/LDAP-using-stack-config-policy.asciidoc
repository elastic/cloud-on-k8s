:parent_page_id: auth-config-using-stack-config-policy
:page_id: LDAP-using-stack-config-policy
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{parent_page_id}.html#k8s-{page_id}[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= LDAP authentication for multiple Elasticsearch clusters using Elastic stack configuration policy.

NOTE: This requires a valid Enterprise license or Enterprise trial license. Check <<{p}-licensing,the license documentation>> for more details about managing licenses.

TIP: Make sure you check the complete link https://www.elastic.co/guide/en/elasticsearch/reference/current/ldap-realm.html guide to setting up LDAP with Elasticsearch. 

Simple example Elastic Stack config policy to configure LDAP realm with user search

[source,yaml,subs="attributes,+macros,callouts"]
----
apiVersion: stackconfigpolicy.k8s.elastic.co/v1alpha1
kind: StackConfigPolicy
metadata:
  name: test-stack-config-policy
spec:
  resourceSelector:
    matchLabels:
      env: my-label
  elasticsearch:
    secureSettings:
    - secretName: ldap-secret <1>
    securityRoleMappings:
      ldap_role: <2>
        roles: [ "superuser" ]
        rules:
          all:
            - field: { realm.name: "ldap1" }
            - field: { dn: "cn=users,dc=example,dc=org" }
        enabled: true
    config:
      logger.org.elasticsearch.discovery: DEBUG
      xpack.security.authc.realms:
        ldap:
          ldap1: <3>
            order: 0
            url: "ldap://openldap.default.svc.cluster.local:1389"
            bind_dn: "cn=admin,dc=example,dc=org"
            user_search:
              base_dn: "dc=example,dc=org"
              filter: "(cn={0})"
            group_search:
              base_dn: "dc=example,dc=org"
            unmapped_groups_as_roles: false
----

<1> `bind_dn` The password for the bind_dn user should be configured by adding the appropriate secure_bind_password setting to the Elasticsearch keystore. This can be done by the following steps:

    ** Create a secret that has the secure_bind_password in the same namespace as the operator
    
    ----
    kubectl create secret generic ldap-secret --from-literal=xpack.security.authc.realms.ldap.ldap1.secure_bind_password=<password>
    ----
   

    ** Add the secret name to the `secureSettings` field under `elasticsearch` in the Elastic Stack configuration policy

<2> Map LDAP groups to roles. In the above example LDAP users group to `superuser` role. `dn: "cn=users,dc=example,dc=org"` is the LDAP distinguished name (DN) of the users group.

<3> Configure the ldap realm using user search in the `config` field under `elasticsearch` this will go into the `elasticsearch.yml` for the Elasticsearch clusters managed by this Elastic Stack configuration policy.

