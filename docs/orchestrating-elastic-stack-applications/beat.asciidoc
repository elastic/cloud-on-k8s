:page_id: beat
:beats_url: https://raw.githubusercontent.com/elastic/cloud-on-k8s/{eck_release_branch}/config/recipes/beats
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run Beats on ECK

This section describes how to configure and deploy Beats with ECK.

* <<{p}-beat-quickstart,Quickstart>>
* <<{p}-beat-configuration,Configuration>>
* <<{p}-beat-configuration-examples,Configuration Examples>>
* <<{p}-beat-troubleshooting,Troubleshooting>>

[id="{p}-beat-quickstart"]
== Quickstart

. Apply the following specification to deploy Filebeat and collect the logs of all containers running in the Kubernetes cluster. ECK automatically configures the secured connection to an Elasticsearch cluster named `quickstart`, created in the link:k8s-quickstart.html[Elasticsearch quickstart].
+
[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  type: filebeat
  version: {version}
  elasticsearchRef:
    name: quickstart
  config:
    filebeat.inputs:
    - type: container
      paths:
      - /var/log/containers/*.log
  daemonSet:
    podTemplate:
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        securityContext:
          runAsUser: 0
        containers:
        - name: filebeat
          volumeMounts:
          - name: varlogcontainers
            mountPath: /var/log/containers
          - name: varlogpods
            mountPath: /var/log/pods
          - name: varlibdockercontainers
            mountPath: /var/lib/docker/containers
        volumes:
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
EOF
----
+
Check <<{p}-beat-configuration-examples>> for more ready-to-use manifests.

. Monitor Beats.
+
Retrieve details about the Filebeat.
+
[source,sh]
----
kubectl get beat
----
+
[source,sh,subs="attributes"]
----
NAME                  HEALTH   AVAILABLE   EXPECTED   TYPE       VERSION   AGE
quickstart            green    3           3          filebeat   {version}     2m
----

. List all the Pods belonging to a given Beat.
+
[source,sh]
----
kubectl get pods --selector='beat.k8s.elastic.co/name=quickstart-beat-filebeat'
----
+
[source,sh]
----
NAME                                      READY   STATUS    RESTARTS   AGE
quickstart-beat-filebeat-tkz65            1/1     Running   0          3m45s
quickstart-beat-filebeat-kx5jt            1/1     Running   0          3m45s
quickstart-beat-filebeat-nb6qh            1/1     Running   0          3m45s
----

. Access logs for one of the Pods.
+
[source,sh]
----
kubectl logs -f quickstart-beat-filebeat-tkz65
----

. Access logs ingested by Filebeat.
+
You have two options:
+
- Follow the Elasticsearch deployment <<{p}-deploy-elasticsearch,guide>> and run:
+
[source,sh]
----
curl -u "elastic:$PASSWORD" -k "https://localhost:9200/filebeat-*/_search"
----
+
- Follow the Kibana deployment <<{p}-deploy-kibana,guide>>, log in and go to *Kibana* > *Discover*.

[id="{p}-beat-configuration"]
== Configuration

[id="{p}-beat-upgrade-specification"]
=== Upgrade the Beat specification

You can upgrade the Beat version or change settings by editing the YAML specification. ECK applies the changes by performing a rolling restart of the Beat Pods. Depending on the specification settings that you used, ECK will set the <<{p}-beat-set-beat-output,output>> part of the config, perform Kibana dashboard <<{p}-beat-set-up-kibana-dashboards,setup>>, restart Beats on certificates rollover and set up the Beats <<{p}-beat-secrets-keystore-for-secure-settings,keystore>>.

[id="{p}-beat-custom-configuration"]
=== Customize Beat configuration

The Beat configuration is defined in the `config` element:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  type: heartbeat
  version: {version}
  elasticsearchRef:
    name: quickstart
  config:
    heartbeat.monitors:
    - type: tcp
      schedule: '@every 5s'
      hosts: ["quickstart-es-http.default.svc:9200"]
  deployment:
    podTemplate:
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        securityContext:
          runAsUser: 0
----

Alternatively, it can be provided through a Secret specified in the `configRef` element:
[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: heartbeat-quickstart
spec:
  type: heartbeat
  version: {version}
  elasticsearchRef:
    name: quickstart
  configRef:
    secretName: heartbeat-config
  deployment:
    podTemplate:
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        securityContext:
          runAsUser: 0
---
apiVersion: v1
kind: Secret
metadata:
  name: heartbeat-config
stringData:
  beat.yml: |-
    heartbeat.monitors:
    - type: tcp
      schedule: '@every 5s'
      hosts: ["quickstart-es-http.default.svc:9200"]
----

For more details, check the link:https://www.elastic.co/guide/en/beats/libbeat/current/config-file-format.html[Beats configuration] section.


[id="{p}-beat-connect-es"]
=== Customize the connection to an Elasticsearch cluster

The `elasticsearchRef` element allows ECK to automatically configure Beats to establish a secured connection to a managed Elasticsearch cluster. By default it targets all nodes in your cluster. If you want to direct traffic to specific nodes of your Elasticsearch cluster, refer to <<{p}-traffic-splitting>> for more information and examples.

[id="{p}-beat-deploy-elastic-beat"]
=== Deploy a Beat

ECK supports the deployment of the following Beats:

- link:https://www.elastic.co/beats/filebeat[Filebeat]
- link:https://www.elastic.co/beats/metricbeat[Metricbeat]
- link:https://www.elastic.co/beats/heartbeat[Heartbeat]
- link:https://www.elastic.co/beats/auditbeat[Auditbeat]
- link:https://www.elastic.co/beats/packetbeat[Packetbeat]
- link:https://www.elastic.co/guide/en/beats/journalbeat/current/index.html[Journalbeat]

For each Beat you want to deploy, you can specify the `type` and `version` elements. ECK creates a new user in Elasticsearch with a minimal set of appropriate roles and permissions to enable the use of all Beats features.

[id="{p}-beat-deploy-community-beat"]
=== Deploy a Community Beat

ECK supports the deployment of any Community Beat. 

. Specify the `type` and `version` elements.

. Set the `image` element to point to the image to be deployed.

. Make sure the following roles exist in Elasticsearch:
+
- If `elasticsearchRef` is provided, create the role `eck_beat_es_$type_role`, where `$type` is the Beat type. For example, when deploying `kafkabeat`, the role name is `eck_beat_es_kafkabeat_role`. This role must have the permissions required by the Beat. Check the link:https://www.elastic.co/guide/en/elasticsearch/reference/current/defining-roles.html[Elasticsearch documentation] for more details.
- If `kibanaRef` is provided, create the role `eck_beat_kibana_$type_role` with the permissions required to setup Kibana dashboards.

Alternatively, create a user in Elasticsearch and include the credentials in the Beats `config` for Elasticsearch output, Kibana setup or both. If `elasticsearchRef` and `kibanaRef` are also defined, ECK will use the provided user credentials when setting up the connections.

[id="{p}-beat-set-up-kibana-dashboards"]
=== Set up Kibana dashboards

ECK can instruct Beats to set up example dashboards packaged with the Beat. To enable this, set the `kibanaRef` element in the specification to point to ECK-managed Kibana deployment:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  kibanaRef:
    name: quickstart
...
----

ECK will create a new user in Elasticsearch with a minimal set of appropriate roles and permissions that is needed for dashboard setup.


[id="{p}-beat-secrets-keystore-for-secure-settings"]
=== Secrets keystore for secure settings

Beats offer a keystore for sensitive settings like passwords. This avoids storing them in plaintext in the configuration.

ECK exposes that mechanism with the `secureSettings` element in the specification. <<{p}-es-secure-settings,Similar to Elasticsearch>>, you can use Kubernetes Secrets to provide the settings securely:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  secureSettings:
  - secretName: agent-name-secret
  config:
    name: ${AGENT_NAME_VAR}
...
---
apiVersion: v1
kind: Secret
metadata:
  name: agent-name-secret
stringData:
  AGENT_NAME_VAR: id_007
----

Check link:https://www.elastic.co/guide/en/beats/filebeat/current/keystore.html[Beats documentation] for more details.


[id="{p}-beat-set-beat-output"]
=== Set Beat output

If the `elasticsearchRef` element is specified, ECK populates the output section of the Beat config. ECK creates a user with appropriate roles and permissions and uses its credentials. If required, it also mounts the CA certificate in all Beat Pods, and recreates Pods when this certificate changes.

Output can be set to any value that is supported by a given Beat. To use it, remove the `elasticsearchRef` element from the specification and include an appropriate output configuration in the `config` or `configRef` elements.

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  config:
    output.kafka:
      hosts: ["kafka1.default.svc:9092", "kafka2.default.svc:9092"]
      topic: '%{[fields.log_topic]}'
      partition.round_robin:
        reachable_only: false
      required_acks: 1
...
----

[id="{p}-beat-chose-the-deployment-model"]
=== Choose the deployment model

Depending on the use case, Beats may need to be deployed as a link:https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] or a link:https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/[DaemonSet]. Provide a `podTemplate` element under either the `deployment` or the `daemonSet` element in the specification to choose how a given Beat should be deployed. When choosing the `deployment` option you can additionally specify the link:https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy[strategy] used to replace old Pods with new ones.

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  deployment:
    strategy:
      type: Recreate
    podTemplate:
      spec:
        securityContext:
          runAsUser: 0
----

Consider picking the `Recreate` strategy if you are using a `hostPath` volume as the Beats data directory to avoid two Pods competing for the same directory.

[id="{p}-beat-role-based-access-control-for-beats"]
=== Role Based Access Control for Beats

Some Beats features (such as link:https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html[autodiscover] or Kubernetes module link:https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-metricset-kubernetes-apiserver.html[metricsets]) require that Beat Pods interact with Kubernetes APIs. Specific permissions are needed to allow this functionality. Standard Kubernetes link:https://kubernetes.io/docs/reference/access-authn-authz/rbac/[RBAC] rules apply. For example, to allow for autodiscover:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: quickstart
spec:
  config:
    filebeat:
      autodiscover:
        providers:
        - node: ${NODE_NAME}
          type: kubernetes
          hints:
            enabled: true
            default_config:
              type: container
              paths:
              - /var/log/containers/*${data.kubernetes.container.id}.log
  daemonSet:
    podTemplate:
      spec:
        serviceAccount: elastic-beat-filebeat-quickstart
        automountServiceAccountToken: true
        containers:
        - name: filebeat
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
...
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-beat-filebeat-quickstart
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-beat-autodiscover-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elastic-beat-autodiscover
subjects:
- kind: ServiceAccount
  name: elastic-beat-filebeat-quickstart
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-beat-autodiscover
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs:
  - get
  - list
  - watch
----

[id="{p}-beat-deploying-beats-in-secured-clusters"]
=== Deploying Beats in secured clusters

To deploy Beats in clusters with the Pod Security Policy admission controller enabled, or link:{p}-openshift-beats.html[in OpenShift clusters], you must grant additional permissions to the Service Account used by the Beat Pods. Those Service Accounts must be bound to a Role or ClusterRole that has `use` permission for the required Pod Security Policy or Security Context Constraints. Different Beats and their features might require different settings set in their PSP/link:{p}-openshift-beats.html[SCC].


[id="{p}-beat-configuration-examples"]
== Configuration Examples

In this section you can find manifests that address a number of common use cases and can be your starting point in exploring Beats deployed with ECK. These manifests are self-contained and work out-of-the-box on any non-secured Kubernetes cluster. They all contain three-node Elasticsearch cluster and single Kibana instance. All Beat configurations set up Kibana dashboards if they are available for a given Beat and all required RBAC resources.

CAUTION: The examples in this section are purely descriptive and should not be considered to be production-ready. Some of these examples use the `node.store.allow_mmap: false` setting which has performance implications and should be tuned for production workloads, as described in <<{p}-virtual-memory>>.

=== Metricbeat for Kubernetes monitoring

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/metricbeat_hosts.yaml
----

Deploys Metricbeat as a DaemonSet that monitors the usage of the following resources:

*  Host: CPU, memory, network, filesystem.
*  Kubernetes: Nodes, Pods, Containers, Volumes.

=== Filebeat with autodiscover

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/filebeat_autodiscover.yaml
----

Deploys Filebeat as a DaemonSet with the autodiscover feature enabled. It collects logs from Pods in every namespace and loads them to the connected Elasticsearch cluster.

=== Filebeat with autodiscover for metadata

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/filebeat_autodiscover_by_metadata.yaml
----

Deploys Filebeat as a DaemonSet with the autodiscover feature enabled. Logs from Pods that match the following criteria are shipped to the connected Elasticsearch cluster:

- Pod is in `log-namespace` namespace
- Pod has `log-label: "true"` label

=== Filebeat without autodiscover

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/filebeat_no_autodiscover.yaml
----

Deploys Filebeat as a DaemonSet with the autodiscover feature disabled. Uses the entire logs directory on the host as the input source. This configuration does not require any RBAC resources as no Kubernetes APIs are used.

=== Elasticsearch and Kibana Stack Monitoring

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/stack_monitoring.yaml
----

Deploys Metricbeat configured for Elasticsearch and Kibana link:https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html[Stack Monitoring] and Filebeat using autodiscover. Deploys one monitored Elasticsearch cluster and one monitoring Elasticsearch cluster. You can access the Stack Monitoring app in the monitoring cluster's Kibana. 

NOTE: In this example, TLS verification is disabled when Metricbeat communicates with the monitored cluster, which is not secure and should not be used in production. To solve this, use custom certificates and configure Metricbeat to verify them.

=== Heartbeat monitoring Elasticsearch and Kibana health

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/heartbeat_es_kb_health.yaml
----

Deploys Heartbeat as a single Pod deployment that monitors the health of Elasticsearch and Kibana by TCP probing their Service endpoints. Heartbeat expects that Elasticsearch and Kibana are deployed in the `default` namespace.

=== Auditbeat

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/auditbeat_hosts.yaml
----

Deploys Auditbeat as a DaemonSet that checks file integrity and audits file operations on the host system.

=== Packetbeat monitoring DNS and HTTP traffic

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/packetbeat_dns_http.yaml
----

Deploys Packetbeat as a DaemonSet that monitors DNS on port `53` and HTTP(S) traffic on ports `80`, `8000`, `8080` and `9200`.


=== OpenShift monitoring

[source,sh,subs="attributes"]
----
kubectl apply -f {beats_url}/openshift_monitoring.yaml
----

Deploys Metricbeat as a DaemonSet that monitors the host resource usage (CPU, memory, network, filesystem), OpenShift resources (Nodes, Pods, Containers, Volumes), API Server and Filebeat using autodiscover. Deploys an Elasticsearch cluster and Kibana to centralize data collection.

[id="{p}-beat-troubleshooting"]
== Troubleshooting

[id="{p}-beat-beat-pods-are-crashing-when-kibanaref-is-specified"]
=== Beat Pods are crashing when kibanaRef is specified

When `kibanaRef` is specified, Beat tries to connect to the Kibana instance. If it's unable to do so, the Beat process exits and the Pod restarts. This may happen when Kibana is not yet up or when a Beat user is not yet created in Elasticsearch. The Pod may restart a few times when it is first deployed. Afterwards, the Beat should run successfully.


[id="{p}-beat-configuration-containing-key-null-is-malformed"]
=== Configuration containing key: null is malformed

When `kubectl` is used to modify a resource, it calculates the diff between the user applied and the existing configuration. This diff has special  link:https://tools.ietf.org/html/rfc7396#section-1[semantics] that forces the removal of keys if they have special values. For example, if the user-applied configuration contains `some_key: null` (or equivalent `some_key: ~`), this is interpreted as an instruction to remove `some_key`. In Beats configurations, this is often a problem when it comes to defining things like link:https://www.elastic.co/guide/en/beats/filebeat/current/add-cloud-metadata.html[processors]. To avoid this problem:

- Use `some_key: {}` (empty map) or `some_key: []` (empty array) instead of `some_key: null` if doing so does not affect the behaviour. This might not be possible in all cases as some applications distinguish between null values and empty values and behave differently.
- Instead of using `config` to define configuration inline, use `configRef` and store the configuration in a Secret.


=== Pod fails to start after update

If you have configured a Beat to run as a `Deployment` and you are using a `hostPath` volume as the Beats data directory, you might encounter an error similar to the following:
[source,shell script]
----
ERROR   instance/beat.go:958    Exiting: data path already locked by another beat. Please make sure that multiple beats are not sharing the same data path (path.data).
----

This can happen if the new Pod is scheduled on the same Kubernetes node as the old Pod and is now trying to use the same data directory. Use a <<{p}-beat-chose-the-deployment-model,`Recreate`>> deployment strategy to avoid this problem.
