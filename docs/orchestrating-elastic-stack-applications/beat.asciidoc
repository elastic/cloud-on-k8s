:page_id: beat
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run Beats on ECK

This section describes how to configure and deploy Beats with ECK.

* <<{p}-beat-quickstart,Quickstart>>
* <<{p}-beat-configuration,Configuration>>
* <<{p}-beat-configuration,Troubleshooting>>

[id="{p}-beat-quickstart"]
== Quickstart

. Apply the following specification to deploy Filebeat. ECK automatically configures the secured connection to an Elasticsearch cluster named `quickstart`, created in link:k8s-quickstart.html[Elasticsearch quickstart].
+
[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: filebeat-quickstart
spec:
  type: filebeat
  version: {version}
  elasticsearchRef:
    name: elasticsearch-quickstart
  config:
    filebeat.inputs:
    - type: container
      paths:
      - /var/log/containers/*.log
  daemonSet:
    podTemplate:
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        securityContext:
          runAsUser: 0
        containers:
        - name: filebeat
          volumeMounts:
          - name: varlogcontainers
            mountPath: /var/log/containers
          - name: varlogpods
            mountPath: /var/log/pods
          - name: varlibdockercontainers
            mountPath: /var/lib/docker/containers
        volumes:
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
EOF
----

. Monitor Beats
+
Retrieve details about the Filebeat:
+
[source,sh]
----
kubectl get beat
----
+
[source,sh,subs="attributes"]
----
NAME                  HEALTH   AVAILABLE   EXPECTED   TYPE       VERSION   AGE
filebeat-quickstart   green    3           3          filebeat   {version}     2m
----
+
List all the Pods belonging to given Beat:
+
[source,sh]
----
kubectl get pods --selector='beat.k8s.elastic.co/name=filebeat-quickstart-beat-filebeat'
----
+
[source,sh]
----
NAME                                      READY   STATUS    RESTARTS   AGE
filebeat-quickstart-beat-filebeat-tkz65   1/1     Running   0          3m45s
filebeat-quickstart-beat-filebeat-kx5jt   1/1     Running   0          3m45s
filebeat-quickstart-beat-filebeat-nb6qh   1/1     Running   0          3m45s
----
+
. Access logs for one of the Pods
+
[source,sh]
----
kubectl logs -f filebeat-quickstart-beat-filebeat-tkz65
----

. Access logs ingested by Filebeat
+
- follow Elasticsearch deployment link:k8s-deploy-elasticsearch.html[guide] and run:
+
[source,sh]
----
curl -u "elastic:$PASSWORD" -k "https://localhost:9200/filebeat-*/_search"
----
+
- or follow Kibana deployment link:k8s-deploy-kibana.html[guide], log in and go to Kibana > Discover.

. Inspect generated Filebeat configuration
+
[source,sh]
----
kubectl get secret filebeat-quickstart-beat-filebeat-config -o jsonpath='{.data.beat\.yml}' | base64 --decode
----
+
[source,sh]
----
filebeat:
  inputs:
  - paths:
    - /var/log/containers/*.log
    type: container
output:
  elasticsearch:
    hosts:
    - https://elasticsearch-sample-es-http.default.svc:9200
    password: <redacted>
    ssl:
      certificate_authorities:
      - /mnt/elastic-internal/elasticsearch-certs/ca.crt
    username: default-filebeat-quickstart-beat-user
----


[id="{p}-beat-configuration"]
== Configuration

[id="{p}-beat-upgrade-specification"]
=== Upgrade the Beat specification

Any setting can be changed in the Beat yaml specification, including version upgrades. ECK detects those changes and ensures a smooth rolling upgrade of all Beat Pods. Depending on specification settings used, ECK will set the <<{p}-beat-set-beat-output,output>> part of the config, perform Kibana dashboard <<{p}-beat-set-up-kibana-dashboards,setup>>, restart Beats on certificates rollover and set up Beats <<{p}-beat-secrets-keystore-for-secure-settings,keystore>>.

[id="{p}-beat-custom-configuration"]
=== Customize Beat configuration

Beat configuration can be provided through `config` element in the specification:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: heartbeat-quickstart
spec:
  type: heartbeat
  version: {version}
  elasticsearchRef:
    name: elasticsearch-quickstart
  config:
    heartbeat.monitors:
    - type: tcp
      schedule: '@every 5s'
      hosts: ["elasticsearch-quickstart-es-http.default.svc:9200"]
  deployment:
    podTemplate:
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        securityContext:
          runAsUser: 0
----

Alternatively, it can be provided indirectly via a Secret specified in `configRef` element in the specification:
[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: heartbeat-quickstart
spec:
  type: heartbeat
  version: 7.8.0
  elasticsearchRef:
    name: elasticsearch-quickstart
  configRef:
    secretName: heartbeat-config
  deployment:
    podTemplate:
      spec:
        dnsPolicy: ClusterFirstWithHostNet
        securityContext:
          runAsUser: 0
---
apiVersion: v1
kind: Secret
metadata:
  name: heartbeat-config
stringData:
  beat.yml: |-
    heartbeat.monitors:
    - type: tcp
      schedule: '@every 5s'
      hosts: ["elasticsearch-quickstart-es-http.default.svc:9200"]
----

For more details about Beats configuration see the link:https://www.elastic.co/guide/en/beats/libbeat/current/beats-reference.html[documentation].

[id="{p}-beat-deploy-elastic-beat"]
=== Deploy Elastic Beat

ECK supports deploying the following Elastic Beats:

- Filebeat
- Metricbeat
- Heartbeat
- Journalbeat
- Auditbeat
- Packetbeat

The Beat to deploy and its version has to be specified via `type` and `version` specification elements respectively. ECK will compute the correct path to the container image, so `image` element doesn't have to be provided. ECK will create a new user in Elasticsearch with a minimal set of appropriate roles and permissions that allow to use all Beat features.

[id="{p}-beat-deploy-community-beat"]
=== Deploy community Beat

ECK supports deploying any community Beat. As with Elastic Beats, `type` and `version` specification elements have to be provided. In addition:

- `image` has to point to the image to be deployed, and
- a role has to exist and have the permissions required by the Beat. Role name has to be `eck_beat_type_role`, where `type` is the Beat type. For example, when deploying `type: kafkabeat` create role named `eck_beat_kafkabeat_role`.


[id="{p}-beat-set-up-kibana-dashboards"]
=== Set up Kibana dashboards

ECK can instruct Beats to set up an example dashboards packaged with the Beat. To enable this, set `kibanaRef` element in the specification to point to ECK-managed Kibana deployment:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: filebeat-quickstart
spec:
  kibanaRef:
    name: kibana-quickstart
...
----

ECK will create a new user in Elasticsearch with minimal set of appropriate roles and permissions that is needed for dashboard setup.


[id="{p}-beat-secrets-keystore-for-secure-settings"]
=== Secrets keystore for secure settings


Beats offer a secret keystore that can be used when sensitive settings, such as passwords, need to be provided in the configuration. This avoids storing them in the config directly.

ECK exposes that mechanism with `secureSettings` element in the specification. <<{p}-es-secure-settings,Similar to Elasticsearch>>, you can use Kubernetes Secrets to manage it:


[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: filebeat-quickstart
spec:
  secureSettings:
  - secretName: agent-name-secret
  config:
    name: ${AGENT_NAME_VAR}
...
---
apiVersion: v1
kind: Secret
metadata:
  name: agent-name-secret
stringData:
  AGENT_NAME_VAR: id_007
----

See Beats link:https://www.elastic.co/guide/en/beats/filebeat/current/keystore.html[documentation] for more details.


[id="{p}-beat-set-beat-output"]
=== Set Beat output

If `elasticsearchRef` element is specified ECK will populate output section of the config. ECK will create a user with appropriate roles and permissions and use its credentials. It will also mount CA certificate in all Beat Pods if necessary and roll over Pods when this certificate changes.

Output can be set to any that's supported by given Beat. To do that, remove `elasticsearchRef` element from the specification and include appropriate output configuration in the `config` or `configRef`.


[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: filebeat-quickstart
spec:
  config:
    output.redis:
      hosts: ["my_redis.default.svc"]
      password: "my_password"
      key: "filebeat"
      db: 0
      timeout: 5
...
----

[id="{p}-beat-chose-the-deployment-model"]
=== Choose the deployment model

Depending on the use case, Beats may need to be deployed as a Deployment or a DaemonSet. Provide `podTemplate` element under either `deployment` or `daemonSet` element in the specification to choose how a given Beat should be deployed.

[id="{p}-beat-role-based-access-control-for-beats"]
=== Role Based Access Control for Beats

Some Beats features (such as link:https://www.elastic.co/guide/en/beats/filebeat/current/configuration-autodiscover.html[autodiscover] or Kubernetes module link:https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-metricset-kubernetes-apiserver.html[metricsets]) require Beat Pods to interact with Kubernetes APIs. Specific permissions are needed to allow that. Standard Kubernetes link:https://kubernetes.io/docs/reference/access-authn-authz/rbac/[RBAC] rules apply. For example, to allow for autodiscover:

[source,yaml,subs="attributes,+macros"]
----
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: filebeat-quickstart
spec:
  config:
    filebeat:
      autodiscover:
        providers:
        - host: ${HOSTNAME}
          type: kubernetes
          hints:
            enabled: true
            default_config:
              type: container
              paths:
              - /var/log/containers/*${data.kubernetes.container.id}.log
  daemonSet:
    podTemplate:
      spec:
        serviceAccount: elastic-beat-filebeat-quickstart
        automountServiceAccountToken: true
...
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-beat-filebeat-quickstart
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-beat-autodiscover-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elastic-beat-autodiscover
subjects:
- kind: ServiceAccount
  name: elastic-beat-filebeat-quickstart
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-beat-autodiscover
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - events
  - pods
  verbs:
  - get
  - list
  - watch
----

[id="{p}-beat-deploying-beats-in-secured-clusters"]
=== Deploying Beats in secured clusters

Deploying Beats in clusters with Pod Security Policy admission controller enabled or in OpenShift clusters require granting additional permissions to the Service Account that Beat Pods are running with. Those Service Accounts need to be bound to a Role or ClusterRole that has `use` permission for the required PSP/SCC. Different Beats and their features might require different settings set in their PSP/SCC.
