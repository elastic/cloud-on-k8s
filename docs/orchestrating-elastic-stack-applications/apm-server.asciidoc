:page_id: apm-server
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run APM Server on ECK

This section describes how to deploy, configure and access an APM Server with ECK.

* <<{p}-apm-eck-managed-es,Use an Elasticsearch cluster managed by ECK>>
* <<{p}-apm-advanced-configuration,Advanced configuration>>
** <<{p}-apm-customize-configuration,Customize the APM Server configuration>>
** <<{p}-apm-secure-settings,APM Secrets keystore for secure settings>>
** <<{p}-apm-existing-es,Reference an existing Elasticsearch cluster>>
** <<{p}-apm-tls,TLS Certificates>>
* <<{p}-apm-connecting,Connect to the APM Server>>
** <<{p}-apm-service,APM Server service>>
** <<{p}-apm-secret-token,APM Server secret token>>

NOTE: The current Docker image of the APM Server must run as `root` or with the user id 1000. This prevents the APM Server from running in some environments such as OpenShift, or on any Kubernetes cluster that would set a different user in the security context.

[id="{p}-apm-eck-managed-es"]
== Use an Elasticsearch cluster managed by ECK

Managing both APM Server and Elasticsearch by ECK allows a smooth and secured integration between the two. The output configuration of the APM Server is setup automatically to establish a trust relationship with Elasticsearch.

. To deploy an APM Server and connect it to the cluster `quickstart` created in the link:k8s-quickstart.html[quickstart], apply the following specification:
+
[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
EOF
----
+
NOTE: Deploying the APM Server and Elasticsearch in two different namespaces is currently not supported.

. Monitor APM Server deployment.
+
You can retrieve details about the APM Server instance:
+
[source,sh]
----
kubectl get apmservers
----
+
[source,sh,subs="attributes"]
----
NAME                     HEALTH    NODES    VERSION   AGE
apm-server-quickstart    green     1        {version}      8m
----
+
And you can list all the Pods belonging to a given deployment:
+
[source,sh]
----
kubectl get pods --selector='apm.k8s.elastic.co/name=apm-server-quickstart'
----
+
[source,sh]
----
NAME                                                READY   STATUS    RESTARTS   AGE
apm-server-quickstart-apm-server-69b447ddc5-fflc6   1/1     Running   0          2m50s
----

[id="{p}-apm-advanced-configuration"]
== Advanced configuration

[id="{p}-apm-customize-configuration"]
=== Customize the APM Server configuration

You can customize the configuration of the APM Server using a `config` element in the specification:

[source,yaml,subs="attributes"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  config:
    output:
      elasticsearch:
        headers:
          X-My-Header: Just an example of a custom settings
  elasticsearchRef:
    name: quickstart
----

NOTE: The configuration items you provide always override the ones that are generated by the operator.

[id="{p}-apm-secure-settings"]
=== APM Secrets keystore for secure settings

The APM Server keystore can be used to store sensitive settings in the APM Server configuration. ECK can automatically manage the APM Server keystore in the Pods.

. First create a secret with the secret settings:
+
[source,yaml]
----
kubectl create secret generic apm-secret-settings --from-literal=ES_PASSWORD=asecretpassword
----

. In the specification of the APM Server add a reference to the previously created secret within a `spec.secureSettings` section. Then reference the key in the APM Server configuration as it is described in the https://www.elastic.co/guide/en/apm/server/current/keystore.html[Secrets keystore for secure settings].
+
[source,yaml,subs="attributes"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  secureSettings:
  - secretName: apm-secret-settings
  config:
    output:
      elasticsearch:
        password: "${ES_PASSWORD}"
----

[id="{p}-apm-existing-es"]
=== Reference an existing Elasticsearch cluster

Now that you know how to use the APM keystore and customize the server configuration, you can manually configure a secured connection to an existing Elasticsearch cluster.

. Create a secret with the Elasticsearch CA.
+
First, you need to store the certificate authority of the Elasticsearch cluster in a secret:
+
[source,yaml]
----
kubectl create secret generic es-ca --from-file=tls.crt=elasticsearch-ca.crt
----
+
NOTE: the file `elasticsearch-ca.crt` must contain the CA certificate of the Elasticsearch cluster you want to use with the APM Server.

. You can then mount this secret using the Pod template, and reference the file in the `config` of the APM Server.
+
Here is a complete example with a password stored in the Keystore as described in the previous section:
+
[source,yaml,subs="attributes"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  secureSettings:
  - secretName: apm-secret-settings
  config:
    output:
      elasticsearch:
        hosts: ["my-own-elasticsearch-cluster:9200"]
        username: elastic
        password: "${ES_PASSWORD}"
        protocol: "https"
        ssl.certificate_authorities: ["/usr/share/apm-server/config/elasticsearch-ca/tls.crt"]
  podTemplate:
    spec:
      containers:
      - name: apm-server
        volumeMounts:
        - mountPath: /usr/share/apm-server/config/elasticsearch-ca
          name: elasticsearch-ca
          readOnly: true
      volumes:
      - name: elasticsearch-ca
        secret:
          defaultMode: 420
          optional: false
          secretName: es-ca # This is the secret that holds the Elasticsearch CA cert
----

[id="{p}-apm-tls"]
=== TLS Certificates

By default the operator manages a private CA and generates a self-signed certificate used to secure the communication between APM agents and the server.

This behavior and the relevant configuration is identical to what is done for Elasticsearch and Kibana. See link:k8s-accessing-elastic-services.html#k8s-setting-up-your-own-certificate[Setting up your own certificate] for more information on how to use your own certificate to configure the TLS endpoint of the APM Server.

For more details on how to configure the APM agents to work with custom certificates, see the  https://www.elastic.co/guide/en/apm/agent/index.html[APM agents documentation].

[id="{p}-apm-connecting"]
== Connect to the APM Server

[id="{p}-apm-service"]
=== APM Server service

The APM Server is exposed with a Service. For information on accessing it, see link:k8s-accessing-elastic-services.html[How to access Elastic Stack services].

To retrieve the list of all the APM Services, use the following command:

[source,sh]
----
kubectl get service --selector='common.k8s.elastic.co/type=apm-server'
----

[source,sh]
----
NAME                             TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
apm-server-quickstart-apm-http   ClusterIP   10.0.1.252   <none>        8200/TCP   154m
----

[id="{p}-apm-secret-token"]
=== APM Server secret token

The operator generates an authorization token that agents must send to authenticate themselves to the APM Server.

This token is stored in a secret named `{APM-server-name}-apm-token` and can be retrieved with the following command:

[source,sh]
----
kubectl get secret/apm-server-quickstart-apm-token -o go-template='{{index .data "secret-token" | base64decode}}'
----

For more information, see https://www.elastic.co/guide/en/apm/server/current/index.html[APM Server Reference].
