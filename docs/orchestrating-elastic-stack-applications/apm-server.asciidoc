:page_id: apm-server
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Run APM Server on ECK

This section describes how to deploy, configure and access an APM Server with ECK.

* <<{p}-apm-eck-managed-es,Use an Elasticsearch cluster managed by ECK>>
* <<{p}-apm-advanced-configuration,Advanced configuration>>
** <<{p}-apm-agent-central-configuration,Use APM Agent central configuration>>
** <<{p}-apm-customize-configuration,Customize the APM Server configuration>>
** <<{p}-apm-secure-settings,APM Secrets keystore for secure settings>>
** <<{p}-apm-existing-es,Reference an existing Elasticsearch cluster>>
** <<{p}-apm-tls,TLS Certificates>>
* <<{p}-apm-connecting,Connect to the APM Server>>
** <<{p}-apm-service,APM Server service>>
** <<{p}-apm-secret-token,APM Server secret token>>

[id="{p}-apm-eck-managed-es"]
== Use an Elasticsearch cluster managed by ECK

Managing both APM Server and Elasticsearch by ECK allows a smooth and secured integration between the two. The output configuration of the APM Server is setup automatically to establish a trust relationship with Elasticsearch.

. To deploy an APM Server and connect it to the cluster you created in the <<{p}-quickstart,quickstart>>, apply the following specification:
+
[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
EOF
----

By default `elasticsearchRef` targets all nodes in your Elasticsearch cluster. If you want to direct traffic to specific nodes of your cluster, refer to <<{p}-traffic-splitting>> for more information and examples.

. Monitor APM Server deployment.
+
You can retrieve details about the APM Server instance:
+
[source,sh]
----
kubectl get apmservers
----
+
[source,sh,subs="attributes"]
----
NAME                     HEALTH    NODES    VERSION   AGE
apm-server-quickstart    green     1        {version}      8m
----
+
And you can list all the Pods belonging to a given deployment:
+
[source,sh]
----
kubectl get pods --selector='apm.k8s.elastic.co/name=apm-server-quickstart'
----
+
[source,sh]
----
NAME                                                READY   STATUS    RESTARTS   AGE
apm-server-quickstart-apm-server-69b447ddc5-fflc6   1/1     Running   0          2m50s
----

[id="{p}-apm-advanced-configuration"]
== Advanced configuration

This section covers the following topics:

** <<{p}-apm-agent-central-configuration>>
** <<{p}-apm-customize-configuration>>
** <<{p}-apm-secure-settings>>
** <<{p}-apm-existing-es>>


[id="{p}-apm-agent-central-configuration"]
=== Use APM Agent central configuration
link:https://www.elastic.co/guide/en/kibana/current/agent-configuration.html[APM Agent configuration management] added:[7.5.1] allows you to configure your APM Agents centrally from the Kibana APM app. To use this feature, the APM Server needs to be configured with connection details of the Kibana instance. If Kibana is managed by ECK, you can simply add a `kibanaRef` attribute to the APM Server specification:

[source,yaml,subs="attributes,+macros"]
----
cat $$<<$$EOF | kubectl apply -f -
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
  kibanaRef:
    name: quickstart
EOF
----

[id="{p}-apm-customize-configuration"]
=== Customize the APM Server configuration

To customize the configuration of the APM Server, use the `config` element in the specification:

[source,yaml,subs="attributes"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  config:
    output:
      elasticsearch:
        headers:
          X-My-Header: Just an example of a custom settings
  elasticsearchRef:
    name: quickstart
----

NOTE: The configuration items you provide always override the ones that are generated by the operator.

[id="{p}-apm-secure-settings"]
=== Specify secure settings for your APM Server

The APM Server keystore can be used to store sensitive settings in the APM Server configuration. ECK can automatically manage the APM Server keystore in the Pods.

.  Create a secret with the secret settings:
+
[source,yaml]
----
kubectl create secret generic apm-secret-settings --from-literal=ES_PASSWORD=asecretpassword
----

. In the `spec.secureSettings` section, add a reference to the secret you previously created. 
+
[source,yaml,subs="attributes"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  secureSettings:
  - secretName: apm-secret-settings
  config:
    output:
      elasticsearch:
        password: "${ES_PASSWORD}"
----

. Reference the key in the APM Server configuration, as described in the https://www.elastic.co/guide/en/apm/server/current/keystore.html[Secrets keystore for secure settings].

[id="{p}-apm-existing-es"]
=== Reference an existing Elasticsearch cluster

Now that you know how to use the APM keystore and customize the server configuration, you can manually configure a secured connection to an existing Elasticsearch cluster.

. Create a secret with the Elasticsearch CA.
+
You need to store the certificate authority of the Elasticsearch cluster in a secret:
+
[source,yaml]
----
kubectl create secret generic es-ca --from-file=tls.crt=elasticsearch-ca.crt
----
+
NOTE: The `elasticsearch-ca.crt` file must contain the CA certificate of the Elasticsearch cluster you want to use with the APM Server.

. Mount this secret using the Pod template, and reference the file in the `config` of the APM Server.
+
Here is a complete example with a password stored in the Keystore, as described in the previous section:
+
[source,yaml,subs="attributes"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: {version}
  count: 1
  secureSettings:
  - secretName: apm-secret-settings
  config:
    output:
      elasticsearch:
        hosts: ["my-own-elasticsearch-cluster:9200"]
        username: elastic
        password: "${ES_PASSWORD}"
        protocol: "https"
        ssl.certificate_authorities: ["/usr/share/apm-server/config/elasticsearch-ca/tls.crt"]
  podTemplate:
    spec:
      containers:
      - name: apm-server
        volumeMounts:
        - mountPath: /usr/share/apm-server/config/elasticsearch-ca
          name: elasticsearch-ca
          readOnly: true
      volumes:
      - name: elasticsearch-ca
        secret:
          defaultMode: 420
          optional: false
          secretName: es-ca # This is the secret that holds the Elasticsearch CA cert
----

[id="{p}-apm-tls"]
=== TLS certificates

By default the operator manages a private CA and generates a self-signed certificate used to secure the communication between APM agents and the server.

This behavior and the relevant configuration is identical to what is done for Elasticsearch and Kibana. Check link:k8s-accessing-elastic-services.html#k8s-setting-up-your-own-certificate[Setting up your own certificate] for more information on how to use your own certificate to configure the TLS endpoint of the APM Server.

For more details on how to configure the APM agents to work with custom certificates, check the https://www.elastic.co/guide/en/apm/agent/index.html[APM agents documentation].

[id="{p}-apm-connecting"]
== Connect to the APM Server

This section covers the following topics:

** <<{p}-apm-service>>
** <<{p}-apm-secret-token>>
** <<{p}-apm-api-keys>>


[id="{p}-apm-service"]
=== APM Server service

The APM Server is exposed with a Service. For information on accessing it, check link:k8s-accessing-elastic-services.html[How to access Elastic Stack services].

To retrieve the list of all the APM Services, use the following command:

[source,sh]
----
kubectl get service --selector='common.k8s.elastic.co/type=apm-server'
----

[source,sh]
----
NAME                             TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
apm-server-quickstart-apm-http   ClusterIP   10.0.1.252   <none>        8200/TCP   154m
----

[id="{p}-apm-secret-token"]
=== APM Server secret token

The operator generates an authorization token that agents must send to authenticate themselves to the APM Server.

This token is stored in a secret named `{APM-server-name}-apm-token` and can be retrieved with the following command:

[source,sh]
----
kubectl get secret/apm-server-quickstart-apm-token -o go-template='{{index .data "secret-token" | base64decode}}'
----

For more information, check https://www.elastic.co/guide/en/apm/server/current/index.html[APM Server Reference].

[id="{p}-apm-api-keys"]
=== APM Server API keys

If you want to configure API keys to authorize requests to the APM Server, instead of using the APM Server CLI, you have to create API keys using the Elasticsearch  https://www.elastic.co/guide/en/elasticsearch/reference/7.14/security-api-create-api-key.html[create API key API], check the https://www.elastic.co/guide/en/apm/server/current/api-key.html#create-api-key-workflow-es[APM Server documentation].
