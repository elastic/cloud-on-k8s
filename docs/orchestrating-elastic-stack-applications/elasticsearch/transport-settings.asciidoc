:parent_page_id: elasticsearch-specification
:page_id: transport-settings
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{parent_page_id}.html#k8s-{page_id}[View this document on the Elastic website]
****
endif::[]
[id="{p}-{page_id}"]
= Transport settings

The transport module in Elasticsearch is used for internal communication between nodes within the cluster as well as communication between remote clusters. See the link:https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-transport.html[Elasticsearch documentation] for details. For customization options of the HTTP layer see <<{p}-services>> and <<{p}-tls-certificates>>.

== Customize the Transport Service

In the `spec.transport.service.` section, you can change the Kubernetes service used to expose the Elasticsearch transport module:

[source,yaml]
----
spec:
  transport:
    service:
      metadata:
        labels:
          my-custom: label
      spec:
        type: LoadBalancer
----

Check the https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types[Kubernetes Publishing Services (ServiceTypes)] that are currently available.

NOTE: When you change the `clusterIP` setting of the service, ECK deletes and re-creates the service, as `clusterIP` is an immutable field. This will cause a short network disruption, but in most cases it should not affect existing connections as the transport module uses long-lived TCP connections.

[id="{p}-transport-ca"]
== Configure a custom Certificate Authority

Elasticsearch uses X.509 certificates to establish encrypted and authenticated connections across nodes in the cluster. By default, ECK creates a self-signed CA certificate to issue a certificate link:https://www.elastic.co/guide/en/elasticsearch/reference/current/configuring-tls.html#node-certificates[for each node in the cluster].

You can use a Kubernetes secret to provide your own CA instead of the self-signed certificate that ECK will then use to create node certificates for transport connections.
The CA certificate must be stored in the secret under `ca.crt` and the private key must be stored under `ca.key`.

You need to reference the name of a secret that contains the TLS private key and the CA certificate, in the `spec.transport.tls.certificate` section, as shown in this example:

[source,yaml]
----
spec:
  transport:
    tls:
      certificate:
        secretName: custom-ca
----
== Customize the node transport certificates
The operator generates a self-signed TLS certificates for each node in the cluster. You can add extra IP addresses or DNS names to the generated certificates as follows:

[source,yaml,subs="attributes"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: quickstart
spec:
  version: {version}
  transport:
    tls:
      subjectAltNames:
      - ip: 1.2.3.4
      - dns: hulk.example.com
  nodeSets:
  - name: default
    count: 3
----
