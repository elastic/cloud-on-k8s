ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-service-meshes.html[View this document on the Elastic website]
****
endif::[]

:istio_version: 1.4.3
:linkerd_version: 2.7.0

[id="{p}-service-meshes"]
== Service meshes

These sections contain information about connecting ECK and managed Elastic Stack applications to some of the most popular link:https://www.cncf.io/blog/2017/04/26/service-mesh-critical-component-cloud-native-stack/[service mesh] implementations in the Kubernetes ecosystem.


[id="{p}-service-mesh-istio"]
=== Istio

The following sections describe how to connect the operator and managed resources to the Istio service mesh. It is assumed that Istio is already installed and configured on your Kubernetes cluster. If you are new to Istio, refer to the link:https://istio.io[product documentation] for more information and installation instructions.

NOTE: These instructions have been tested with Istio {istio_version}.

[float]
[id="{p}-service-mesh-istio-operator-connection"]
==== Connecting the operator to the Istio service mesh

The operator itself must be connected to the service mesh in order to deploy and manage Elastic Stack resources that you wish to connect to the service mesh. This is achieved by injecting an Istio sidecar to the ECK operator pods. The following instructions assume that link:https://istio.io/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection[automatic sidecar injection] is enabled on your cluster via a mutating admissions webhook. Refer to link:https://istio.io/docs/setup/additional-setup/sidecar-injection/#injection[Istio injection documentation] if you prefer a different method of injection.

Create the `elastic-system` namespace and enable sidecar injection:

[source,sh]
----
kubectl create namespace elastic-system
kubectl label namespace elastic-system istio-injection=enabled
----

Install ECK:

[source,sh,subs="attributes"]
----
kubectl apply -f https://download.elastic.co/downloads/eck/{eck_version}/all-in-one.yaml
----

Check the configuration to ensure that the installation has been successful:

[source,sh]
----
kubectl get pod elastic-operator-0 -n elastic-system -o=jsonpath='{range .spec.containers[*]}{.name}{"\n"}'
----

If the output of the above command contains both `manager` and `istio-proxy`, ECK has been successfully installed with the Istio sidecar injected.


[float]
[id="{p}-service-mesh-istio-stack-connection"]
==== Connecting Elastic Stack applications to the Istio service mesh

NOTE: This section assumes that you are deploying Elasticsearch, Kibana, or APM Server resources to a namespace that has link:https://istio.io/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection[automatic sidecar injection] enabled.


If you have configured Istio in link:https://istio.io/docs/concepts/security/#permissive-mode[permissive mode], examples defined elsewhere in the ECK documentation will continue to work without requiring any modifications. However, if you have enabled strict mutual TLS authentication between services either via global (`MeshPolicy`) or namespace-level (`Policy`) configuration, the following modifications to the resource manifests are necessary for correct operation.

[float]
[id="{p}-service-mesh-istio-elasticsearch"]
===== Elasticsearch

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: elastic-istio
spec:
  version: {version}
  http:
    tls: <1>
      selfSignedCertificate:
        disabled: true
  nodeSets:
  - name: default
    count: 3
    config:
      node.store.allow_mmap: false
    podTemplate:
      metadata:
        annotations:
          traffic.sidecar.istio.io/excludeOutboundPorts: "9300" <2>
          traffic.sidecar.istio.io/excludeInboundPorts: "9300"
----

<1> Disable the default self-signed certificate generated by the operator and allow TLS to be managed by Istio.

<2> Exclude the transport port (port 9300) from being proxied. Currently ECK does not support switching off X-Pack security and TLS for the Elasticsearch transport port. If Istio is allowed to proxy the transport port, the traffic will be encrypted twice and communication between Elasticsearch nodes will be disrupted.


If you do not have link:https://istio.io/docs/tasks/security/authentication/auto-mtls/[automatic mutual TLS] enabled, you may need to create a link:https://istio.io/docs/reference/config/networking/destination-rule/[Destination Rule] to allow the operator to communicate with the Elasticsearch cluster. A communication issue between the operator and the managed Elasticsearch cluster can be detected by looking at the operator logs to see if there are any errors reported with the text `503 Service Unavailable`.

[source,sh]
----
kubectl logs -f -n elastic-system -c manager statefulset.apps/elastic-operator
----

If the operator logs indicate a communications problem, create a `DestinationRule` to enable mutual TLS between the operator and the affected Elasticsearch cluster. For example, the following rule enables mutual TLS for a specific Elasticsearch cluster named `elastic-istio` deployed to the `default` namespace.

[source,yaml]
----
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: elastic-istio
spec:
  host: "elastic-istio-es-http.default.svc.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
----

Refer to the link:https://istio.io/docs/tasks/security/authentication/mtls-migration/[Istio documentation] for more information about other configuration options affecting authentication between services.


[float]
[id="{p}-service-mesh-istio-kibana"]
===== Kibana

[source,yaml,subs="attributes,callouts"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: elastic-istio
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: elastic-istio
  http:
    tls: <1>
      selfSignedCertificate:
        disabled: true
----

<1> Disable the default self-signed certificate generated by the operator and allow TLS to be managed by Istio.


[float]
[id="{p}-service-mesh-istio-apm"]
===== APM Server

[source,yaml,subs="attributes,callouts"]
----
apiVersion: apm.k8s.elastic.co/{eck_crd_version}
kind: ApmServer
metadata:
  name: elastic-istio
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: elastic-istio
  http:
    tls: <1>
      selfSignedCertificate:
        disabled: true
  podTemplate:
    metadata:
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true" <2>
----

<1> Disable the default self-signed certificate generated by the operator and allow TLS to be managed by Istio.
<2> Automatically re-write the health checks to go through the proxy.


[id="{p}-service-mesh-linkerd"]
=== Linkerd

The following sections describe how to connect the operator and managed resources to the Linkerd service mesh. It is assumed that Linkerd is already installed and configured on your Kubernetes cluster. If you are new to Linkerd, refer to the link:https://linkerd.io[product documentation] for more information and installation instructions.

NOTE: These instructions have been tested with Linkerd {linkerd_version}.

[float]
[id="{p}-service-mesh-linkerd-operator-connection"]
==== Connecting the operator to the Linkerd service mesh

In order to connect the operator to the service mesh, Linkerd sidecar must be injected into the ECK deployment. This can be done during installation as follows:

[source,sh,subs="attributes"]
----
linkerd inject https://download.elastic.co/downloads/eck/{eck_version}/all-in-one.yaml | kubectl apply -f -
----

Confirm that the operator is now meshed:

[source,sh]
----
linkerd stat sts/elastic-operator -n elastic-system
----

If the installation was successful, the output of the above command should show `1/1` under the `MESHED` column.

[float]
[id="{p}-service-mesh-linkerd-stack-connection"]
==== Connecting Elastic Stack applications to the Linkerd service mesh

The easiest way to connect applications to the service mesh is by adding the `linkerd.io/inject: enabled` annotation to the deployment namespace. For example, if you are planning to deploy Elastic Stack applications to a namespace named `elastic-stack`, annotate it as follows to enable link:https://linkerd.io/2/features/proxy-injection/[automatic Linkerd sidecar injection].

[source,sh]
----
kubectl annotate namespace elastic-stack linkerd.io/inject=enabled
----

Any Elasticsearch, Kibana, or APM Server resources deployed to a namespace with the above annotation will automatically join the mesh.

Alternatively, if you only want specific resources to join the mesh, add the `linkerd.io/inject: enabled` annotation to the `podTemplate` (see <<{p}-api-reference, API documentation>>) of the resource as follows:

[source,yaml]
----
podTemplate:
  metadata:
    annotations:
      linkerd.io/inject: enabled
----

If automatic sidecar injection is enabled and link:https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server[auto mounting of service account tokens] is not disabled on your Kubernetes cluster, examples defined elsewhere in the ECK documentation will continue to work under Linkerd without requiring any modifications. However, as the default behaviour of ECK is to enable TLS for Elasticsearch, Kibana and APM Server resources, you will not be able to view detailed traffic information from Linkerd dashboards and command-line utilities. The following sections illustrate the optional configuration necessary to enhance the integration of Elastic Stack applications with Linkerd.

[float]
[id="{p}-service-mesh-linkerd-elasticsearch"]
===== Elasticsearch

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: elastic-linkerd
spec:
  version: {version}
  http:
    tls: <1>
      selfSignedCertificate:
        disabled: true
  nodeSets:
  - name: default
    count: 3
    config:
      node.store.allow_mmap: false
    podTemplate:
      metadata:
        annotations:
          linkerd.io/inject: enabled <2>
      spec:
        automountServiceAccountToken: true <3>
----

<1> Disable automatic TLS to allow Linkerd to gather more statistics about connections (optional).
<2> Explicitly enable sidecar injection (optional if the namespace is already annotated).
<3> Enable service account token mounting to provide service identity (only required to enable mTLS if service account auto-mounting is disabled).

[float]
[id="{p}-service-mesh-linkerd-kibana-apm"]
===== Kibana and APM Server

The configuration is almost identical for Kibana and APM Server resources.

[source,yaml,subs="attributes,callouts"]
----
apiVersion: ...
kind: ...
metadata:
  name: elastic-linkerd
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: elastic-linkerd
  http:
    tls: <1>
      selfSignedCertificate:
        disabled: true
  podTemplate:
    metadata:
      annotations:
        linkerd.io/inject: enabled <2>
    spec:
      automountServiceAccountToken: true <3>
----

<1> Disable automatic TLS to allow Linkerd to gather more statistics about connections (optional).
<2> Explicitly enable sidecar injection (optional if the namespace is already annotated).
<3> Enable service account token mounting to provide service identity (only required to enable mTLS if service account auto-mounting is disabled).
