:page_id: stack-monitoring
ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/k8s-{page_id}.html[View this document on the Elastic website]
****
endif::[]

[id="{p}-{page_id}"]
= Stack Monitoring

You can enable link:https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html[Stack Monitoring]
on Elasticsearch, Kibana, Beats and Logstash to collect and ship their metrics and logs to a dedicated monitoring cluster.

To enable Stack Monitoring, simply reference the monitoring Elasticsearch cluster in the `spec.monitoring` section of their specification.

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: monitored-sample
  namespace: production
spec:
  version: {version}
  monitoring:
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
  nodeSets:
  - name: default
    count: 1
    config:
      node.store.allow_mmap: false
---
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: monitored-sample
  namespace: production
spec:
  version: {version}
  elasticsearchRef:
    name: monitored-sample
    namespace: production <1>
  monitoring:
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
  count: 1
---
apiVersion: beat.k8s.elastic.co/v1beta1
kind: Beat
metadata:
  name: monitored-sample
spec:
  type: filebeat
  version: {version}
  monitoring:
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
---
apiVersion: logstash.k8s.elastic.co/v1beta1
kind: Logstash
metadata:
    name: monitored-sample
spec:
  version: {version}
  monitoring:
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability <1>
----

<1> The use of `namespace` is optional if the monitoring Elasticsearch cluster and the monitored Elastic Stack resource are running in the same namespace.

NOTE: You can configure an Elasticsearch cluster to monitor itself.

NOTE: If Stack Monitoring is configured for a Beat, but the corresponding Elasticsearch cluster is not monitored, the Kibana Stack Monitoring page will not show the Beats data.

NOTE: If Logs Stack Monitoring is configured for a Beat, and custom container arguments (`podTemplate.spec.containers[].args`) include `-e`, which enables logging to stderr and disables log file output, this argument will be removed from the Pod to allow the Filebeat sidecar to consume the Beat's log files.

NOTE: Stack Monitoring for Logstash on ECK is only available for Logstash versions 8.7.0 and later.

IMPORTANT: The monitoring cluster must be managed by ECK in the same Kubernetes cluster as the monitored one.

You can send metrics and logs to two different Elasticsearch monitoring clusters.

You can also enable Stack Monitoring on Elasticsearch only or on Kibana only. In the latter case, Kibana will not be available on the Stack Monitoring Kibana page (check link:https://www.elastic.co/guide/en/kibana/current/monitoring-data.html#monitoring-data[View monitoring data in Kibana]).

== Connect to an external monitoring Elasticsearch cluster

If you want to connect to a monitoring Elasticsearch cluster not managed by ECK, you can reference a Secret instead of an Elastisearch cluster in the `monitoring` section through the `secretName` attribute:

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/{eck_crd_version}
kind: Elasticsearch
metadata:
  name: monitored-sample
  namespace: production
spec:
  version: {version}
  monitoring:
    metrics:
      elasticsearchRefs:
      - secretName: monitoring-metrics-es-ref <1>
    logs:
      elasticsearchRefs:
      - name: monitoring-logs
        namespace: observability <2>
        serviceName: monitoring-logs-es-coordinating-nodes <2>
  nodeSets:
  - name: default
    count: 1
    config:
      node.store.allow_mmap: false
----

<1> The `secretName` and `name` attributes are mutually exclusive, you have to choose one or the other.
<2> The `namespace` and `serviceName` attributes can only be used in conjunction with `name`, not with `secretName`.

The referenced Secret must contain the following connection information:

- `url`: the URL to reach the Elasticsearch cluster
- `username`: the username of the user to be authenticated to the Elasticsearch cluster
- `password`: the password of the user to be authenticated to the Elasticsearch cluster
- `ca.crt`: the CA certificate in PEM format to secure communication to the Elasticsearch cluster (optional)

[source,yaml,subs="attributes,callouts"]
----
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-metrics-es-ref
stringData:
  url: https://mon1.es.abcd-42.xyz.elastic-cloud.com:9243
  username: monitoring-user
  password: REDACTED
----

The user referenced in the Secret must have been created beforehand.

== When to use it

This feature is a good solution if you need to monitor your Elastic applications in restricted Kubernetes environments where you cannot grant advanced permissions:

- to Metricbeat to allow queriying the k8s API
- to Filebeat to deploy a privileged DaemonSet

However, for maximum efficiency and minimising resource consumption, or advanced use cases that require specific Beats configurations, you can deploy a standalone Metricbeat Deployment and a Filebeat Daemonset. Check the <<{p}-beat-configuration-examples,Beats configuration Examples>> for more information.

== How it works

In the background, Metricbeat and Filebeat are deployed as sidecar containers in the same Pod as Elasticsearch and Kibana.

Metricbeat is used to collect monitoring metrics and Filebeat to monitor the Elasticsearch log files and collect log events.

The two Beats are configured to ship data directly to the monitoring cluster(s) using HTTPS and dedicated Elastic users managed by ECK.

== Audit logging

Audit logs are collected and shipped to the monitoring cluster referenced in the `monitoring.logs` section when audit logging is enabled (it is disabled by default).

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
spec:
  monitoring:
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability
  nodeSets:
  - name: default
    config:
      # https://www.elastic.co/guide/en/elasticsearch/reference/current/enable-audit-logging.html
      xpack.security.audit.enabled: true
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
spec:
  monitoring:
    metrics:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability
    logs:
      elasticsearchRefs:
      - name: monitoring
        namespace: observability
  config:
    # https://www.elastic.co/guide/en/kibana/current/xpack-security-audit-logging.html
    xpack.security.audit.enabled: true
----

== Override the Beats Pod Template

You can customize the Filebeat and Metricbeat containers through the Pod template. Your configuration is merged with the values of the default Pod template that ECK uses.

[source,yaml,subs="attributes,callouts"]
----
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
spec:
  monitoring:
    metrics:
      elasticsearchRef:
        name: monitoring
        namespace: observability
    logs:
      elasticsearchRef:
        name: monitoring
        namespace: observability
  nodeSets:
  - name: default
    podTemplate:
      spec:
        containers:
        - name: metricbeat
          env:
          - foo: bar
        - name: filebeat
          env:
          - foo: bar
----
