// Generated documentation. Please do not edit.
[id="{p}-api-reference"]
== API Reference

.Packages
* xref:apm-k8s-elastic-co-v1beta1[apm.k8s.elastic.co/v1beta1]
* xref:common-k8s-elastic-co-v1beta1[common.k8s.elastic.co/v1beta1]
* xref:elasticsearch-k8s-elastic-co-v1beta1[elasticsearch.k8s.elastic.co/v1beta1]
* xref:kibana-k8s-elastic-co-v1beta1[kibana.k8s.elastic.co/v1beta1]

'''


[id="apm-k8s-elastic-co-v1beta1"]
[float]
=== apm.k8s.elastic.co/v1beta1
Package v1beta1 contains API Schema definitions for the apm v1beta1 API group

.Resource Types
--
- link:#apm-k8s-elastic-co-v1beta1-apmserver[$$ApmServer$$]
--

[id="apm-k8s-elastic-co-v1beta1-apmserver"]
[float]
==== ApmServer

ApmServer is the Schema for the apmservers API
[cols="20a,80a", options="header"]
|===
|Field |Description
| *`apiVersion`*  +
_string_
| `apm.k8s.elastic.co/v1beta1`

| *`kind`*  +
_string_
| `ApmServer`

| *`metadata`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta[$$Kubernetes meta/v1.ObjectMeta$$]_
|
---
Refer to the Kubernetes API documentation for the fields of the `metadata` field.
| *`spec`* +
_link:#apm-k8s-elastic-co-v1beta1-apmserverspec[$$ApmServerSpec$$]_
|
---

*`version`*  _string_::
Version represents the version of the APM Server
*`image`*  _string_::
Image represents the docker image that will be used.
*`count`*  _int32_::
Count defines how many nodes the Apm Server deployment must have.
*`config`* _link:#common-k8s-elastic-co-v1beta1-config[$$Config$$]_::
Config represents the APM configuration.
*`http`* _link:#common-k8s-elastic-co-v1beta1-httpconfig[$$HTTPConfig$$]_::
HTTP contains settings for HTTP.
*`elasticsearchRef`* _link:#common-k8s-elastic-co-v1beta1-objectselector[$$ObjectSelector$$]_::
ElasticsearchRef references an Elasticsearch resource in the Kubernetes cluster.
If the namespace is not specified, the current resource namespace will be used.
*`podTemplate`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#podtemplatespec-v1-core[$$Kubernetes core/v1.PodTemplateSpec$$]_::
PodTemplate can be used to propagate configuration to APM Server pods.
This allows specifying custom annotations, labels, environment variables,
affinity, resources, etc. for the pods created from this spec.
*`secureSettings`* _link:#common-k8s-elastic-co-v1beta1-secretsource[$$[]SecretSource$$]_::
SecureSettings references secrets containing secure settings, to be injected
into the APM keystore on each node.
Each individual key/value entry in the referenced secrets is considered as an
individual secure setting to be injected.
You can use the `entries` and `key` fields to consider only a subset of the secret
entries and the `path` field to change the target path of a secret entry key.
The secret must exist in the same namespace as the APM resource.
|===

[id="apm-k8s-elastic-co-v1beta1-apmserverspec"]
[float]
==== ApmServerSpec
(*Appears on:*
link:#apm-k8s-elastic-co-v1beta1-apmserver[ApmServer]
)

ApmServerSpec defines the desired state of ApmServer
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`version`* +
_string_
|
Version represents the version of the APM Server
| *`image`* +
_string_
|
Image represents the docker image that will be used.
| *`count`* +
_int32_
|
Count defines how many nodes the Apm Server deployment must have.
| *`config`* +
_link:#common-k8s-elastic-co-v1beta1-config[$$Config$$]_
|
Config represents the APM configuration.
| *`http`* +
_link:#common-k8s-elastic-co-v1beta1-httpconfig[$$HTTPConfig$$]_
|
HTTP contains settings for HTTP.
| *`elasticsearchRef`* +
_link:#common-k8s-elastic-co-v1beta1-objectselector[$$ObjectSelector$$]_
|
ElasticsearchRef references an Elasticsearch resource in the Kubernetes cluster.
If the namespace is not specified, the current resource namespace will be used.
| *`podTemplate`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#podtemplatespec-v1-core[$$Kubernetes core/v1.PodTemplateSpec$$]_
|
PodTemplate can be used to propagate configuration to APM Server pods.
This allows specifying custom annotations, labels, environment variables,
affinity, resources, etc. for the pods created from this spec.
| *`secureSettings`* +
_link:#common-k8s-elastic-co-v1beta1-secretsource[$$[]SecretSource$$]_
|
SecureSettings references secrets containing secure settings, to be injected
into the APM keystore on each node.
Each individual key/value entry in the referenced secrets is considered as an
individual secure setting to be injected.
You can use the `entries` and `key` fields to consider only a subset of the secret
entries and the `path` field to change the target path of a secret entry key.
The secret must exist in the same namespace as the APM resource.
|===
[id="common-k8s-elastic-co-v1beta1"]
[float]
=== common.k8s.elastic.co/v1beta1
Package v1beta1 contains API Schema definitions for the common v1beta1 API group

.Resource Types
--
--

[id="common-k8s-elastic-co-v1beta1-config"]
[float]
==== Config
(*Appears on:*
link:#apm-k8s-elastic-co-v1beta1-apmserverspec[ApmServerSpec], 
link:#kibana-k8s-elastic-co-v1beta1-kibanaspec[KibanaSpec], 
link:#elasticsearch-k8s-elastic-co-v1beta1-nodeset[NodeSet]
)

Config represents untyped YAML configuration inside a spec.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`Data`* +
_map[string]interface{}_
|
This field exists to work around https://github.com/kubernetes-sigs/kubebuilder/issues/528
|===

[id="common-k8s-elastic-co-v1beta1-httpconfig"]
[float]
==== HTTPConfig
(*Appears on:*
link:#apm-k8s-elastic-co-v1beta1-apmserverspec[ApmServerSpec], 
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec[ElasticsearchSpec], 
link:#kibana-k8s-elastic-co-v1beta1-kibanaspec[KibanaSpec]
)

HTTPConfig configures an HTTP-based service.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`service`* +
_link:#common-k8s-elastic-co-v1beta1-servicetemplate[$$ServiceTemplate$$]_
|
Service is a template for the Kubernetes Service
| *`tls`* +
_link:#common-k8s-elastic-co-v1beta1-tlsoptions[$$TLSOptions$$]_
|
TLS describe additional options to consider when generating HTTP TLS certificates.
|===

[id="common-k8s-elastic-co-v1beta1-keytopath"]
[float]
==== KeyToPath
(*Appears on:*
link:#common-k8s-elastic-co-v1beta1-secretsource[SecretSource]
)

Maps a string key to a path within a volume.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`key`* +
_string_
|
The key to project.
| *`path`* +
_string_
|
The relative path of the file to map the key to.
May not be an absolute path.
May not contain the path element '..'.
May not start with the string '..'.
|===

[id="common-k8s-elastic-co-v1beta1-objectselector"]
[float]
==== ObjectSelector
(*Appears on:*
link:#apm-k8s-elastic-co-v1beta1-apmserverspec[ApmServerSpec], 
link:#kibana-k8s-elastic-co-v1beta1-kibanaspec[KibanaSpec]
)

ObjectSelector allows to specify a reference to an object across namespace boundaries.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`name`* +
_string_
|
---
| *`namespace`* +
_string_
|
---
|===

[id="common-k8s-elastic-co-v1beta1-poddisruptionbudgettemplate"]
[float]
==== PodDisruptionBudgetTemplate
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec[ElasticsearchSpec]
)

PodDisruptionBudgetTemplate contains a template for creating a PodDisruptionBudget.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`metadata`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta[$$Kubernetes meta/v1.ObjectMeta$$]_
|
ObjectMeta is metadata for the service.
The name and namespace provided here is managed by ECK and will be ignored.
Refer to the Kubernetes API documentation for the fields of the `metadata` field.
| *`spec`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#poddisruptionbudgetspec-v1beta1-policy[$$Kubernetes policy/v1beta1.PodDisruptionBudgetSpec$$]_
|
Spec of the desired behavior of the PodDisruptionBudget

*`minAvailable`*  _Kubernetes intstr.IntOrString_::
_(Optional)_
An eviction is allowed if at least "minAvailable" pods selected by
"selector" will still be available after the eviction, i.e. even in the
absence of the evicted pod.  So for example you can prevent all voluntary
evictions by specifying "100%".
*`selector`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#labelselector-v1-meta[$$Kubernetes meta/v1.LabelSelector$$]_::
_(Optional)_
Label query over pods whose evictions are managed by the disruption
budget.
*`maxUnavailable`*  _Kubernetes intstr.IntOrString_::
_(Optional)_
An eviction is allowed if at most "maxUnavailable" pods selected by
"selector" are unavailable after the eviction, i.e. even in absence of
the evicted pod. For example, one can prevent all voluntary evictions
by specifying 0. This is a mutually exclusive setting with "minAvailable".
|===

[id="common-k8s-elastic-co-v1beta1-secretref"]
[float]
==== SecretRef
(*Appears on:*
link:#common-k8s-elastic-co-v1beta1-tlsoptions[TLSOptions]
)

SecretRef reference a secret by name.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`secretName`* +
_string_
|
---
|===

[id="common-k8s-elastic-co-v1beta1-secretsource"]
[float]
==== SecretSource
(*Appears on:*
link:#apm-k8s-elastic-co-v1beta1-apmserverspec[ApmServerSpec], 
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec[ElasticsearchSpec], 
link:#kibana-k8s-elastic-co-v1beta1-kibanaspec[KibanaSpec]
)


[cols="20a,80a", options="header"]
|===
|Field |Description

| *`secretName`* +
_string_
|
Name of the secret in the pod's namespace to use.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
| *`entries`* +
_link:#common-k8s-elastic-co-v1beta1-keytopath[$$[]KeyToPath$$]_
|
If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present.
|===

[id="common-k8s-elastic-co-v1beta1-selfsignedcertificate"]
[float]
==== SelfSignedCertificate
(*Appears on:*
link:#common-k8s-elastic-co-v1beta1-tlsoptions[TLSOptions]
)


[cols="20a,80a", options="header"]
|===
|Field |Description

| *`subjectAltNames`* +
_link:#common-k8s-elastic-co-v1beta1-subjectalternativename[$$[]SubjectAlternativeName$$]_
|
SubjectAlternativeNames is a list of SANs to include in the HTTP TLS certificates.
For example: a wildcard DNS to expose the cluster.
| *`disabled`* +
_bool_
|
Disabled turns off the provisioning of self-signed HTTP TLS certificates.
|===

[id="common-k8s-elastic-co-v1beta1-servicetemplate"]
[float]
==== ServiceTemplate
(*Appears on:*
link:#common-k8s-elastic-co-v1beta1-httpconfig[HTTPConfig]
)

ServiceTemplate describes the data a service should have when created from a template
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`metadata`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta[$$Kubernetes meta/v1.ObjectMeta$$]_
|
ObjectMeta is metadata for the service.
The name and namespace provided here is managed by ECK and will be ignored.
Refer to the Kubernetes API documentation for the fields of the `metadata` field.
| *`spec`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#servicespec-v1-core[$$Kubernetes core/v1.ServiceSpec$$]_
|
Spec defines the behavior of the service.

*`ports`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#serviceport-v1-core[$$[]Kubernetes core/v1.ServicePort$$]_::
The list of ports that are exposed by this service.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
*`selector`*  _map[string]string_::
_(Optional)_
Route service traffic to pods with label keys and values matching this
selector. If empty or not present, the service is assumed to have an
external process managing its endpoints, which Kubernetes will not
modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
Ignored if type is ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/
*`clusterIP`*  _string_::
_(Optional)_
clusterIP is the IP address of the service and is usually assigned
randomly by the master. If an address is specified manually and is not in
use by others, it will be allocated to the service; otherwise, creation
of the service will fail. This field can not be changed through updates.
Valid values are "None", empty string (""), or a valid IP address. "None"
can be specified for headless services when proxying is not required.
Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if
type is ExternalName.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
*`type`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#servicetype-v1-core[$$Kubernetes core/v1.ServiceType$$]_::
_(Optional)_
type determines how the Service is exposed. Defaults to ClusterIP. Valid
options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
"ExternalName" maps to the specified externalName.
"ClusterIP" allocates a cluster-internal IP address for load-balancing to
endpoints. Endpoints are determined by the selector or if that is not
specified, by manual construction of an Endpoints object. If clusterIP is
"None", no virtual IP is allocated and the endpoints are published as a
set of endpoints rather than a stable IP.
"NodePort" builds on ClusterIP and allocates a port on every node which
routes to the clusterIP.
"LoadBalancer" builds on NodePort and creates an
external load-balancer (if supported in the current cloud) which routes
to the clusterIP.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
*`externalIPs`*  _[]string_::
_(Optional)_
externalIPs is a list of IP addresses for which nodes in the cluster
will also accept traffic for this service.  These IPs are not managed by
Kubernetes.  The user is responsible for ensuring that traffic arrives
at a node with this IP.  A common example is external load-balancers
that are not part of the Kubernetes system.
*`sessionAffinity`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#serviceaffinity-v1-core[$$Kubernetes core/v1.ServiceAffinity$$]_::
_(Optional)_
Supports "ClientIP" and "None". Used to maintain session affinity.
Enable client IP based session affinity.
Must be ClientIP or None.
Defaults to None.
More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
*`loadBalancerIP`*  _string_::
_(Optional)_
Only applies to Service Type: LoadBalancer
LoadBalancer will get created with the IP specified in this field.
This feature depends on whether the underlying cloud-provider supports specifying
the loadBalancerIP when a load balancer is created.
This field will be ignored if the cloud-provider does not support the feature.
*`loadBalancerSourceRanges`*  _[]string_::
_(Optional)_
If specified and supported by the platform, this will restrict traffic through the cloud-provider
load-balancer will be restricted to the specified client IPs. This field will be ignored if the
cloud-provider does not support the feature."
More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
*`externalName`*  _string_::
_(Optional)_
externalName is the external reference that kubedns or equivalent will
return as a CNAME record for this service. No proxying will be involved.
Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123)
and requires Type to be ExternalName.
*`externalTrafficPolicy`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#serviceexternaltrafficpolicytype-v1-core[$$Kubernetes core/v1.ServiceExternalTrafficPolicyType$$]_::
_(Optional)_
externalTrafficPolicy denotes if this Service desires to route external
traffic to node-local or cluster-wide endpoints. "Local" preserves the
client source IP and avoids a second hop for LoadBalancer and Nodeport
type services, but risks potentially imbalanced traffic spreading.
"Cluster" obscures the client source IP and may cause a second hop to
another node, but should have good overall load-spreading.
*`healthCheckNodePort`*  _int32_::
_(Optional)_
healthCheckNodePort specifies the healthcheck nodePort for the service.
If not specified, HealthCheckNodePort is created by the service api
backend with the allocated nodePort. Will use user-specified nodePort value
if specified by the client. Only effects when Type is set to LoadBalancer
and ExternalTrafficPolicy is set to Local.
*`publishNotReadyAddresses`*  _bool_::
_(Optional)_
publishNotReadyAddresses, when set to true, indicates that DNS implementations
must publish the notReadyAddresses of subsets for the Endpoints associated with
the Service. The default value is false.
The primary use case for setting this field is to use a StatefulSet's Headless Service
to propagate SRV records for its Pods without respect to their readiness for purpose
of peer discovery.
*`sessionAffinityConfig`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#sessionaffinityconfig-v1-core[$$Kubernetes core/v1.SessionAffinityConfig$$]_::
_(Optional)_
sessionAffinityConfig contains the configurations of session affinity.
|===

[id="common-k8s-elastic-co-v1beta1-subjectalternativename"]
[float]
==== SubjectAlternativeName
(*Appears on:*
link:#common-k8s-elastic-co-v1beta1-selfsignedcertificate[SelfSignedCertificate]
)


[cols="20a,80a", options="header"]
|===
|Field |Description

| *`dns`* +
_string_
|
---
| *`ip`* +
_string_
|
---
|===

[id="common-k8s-elastic-co-v1beta1-tlsoptions"]
[float]
==== TLSOptions
(*Appears on:*
link:#common-k8s-elastic-co-v1beta1-httpconfig[HTTPConfig]
)


[cols="20a,80a", options="header"]
|===
|Field |Description

| *`selfSignedCertificate`* +
_link:#common-k8s-elastic-co-v1beta1-selfsignedcertificate[$$SelfSignedCertificate$$]_
|
SelfSignedCertificate define options to apply to self-signed certificate
managed by the operator.
| *`certificate`* +
_link:#common-k8s-elastic-co-v1beta1-secretref[$$SecretRef$$]_
|
Certificate is a reference to a secret that contains the certificate and private key to be used.

The secret should have the following content:

- `ca.crt`: The certificate authority (optional)
- `tls.crt`: The certificate (or a chain).
- `tls.key`: The private key to the first certificate in the certificate chain.
|===
[id="elasticsearch-k8s-elastic-co-v1beta1"]
[float]
=== elasticsearch.k8s.elastic.co/v1beta1
Package v1beta1 contains API Schema definitions for the elasticsearch v1beta1 API group

.Resource Types
--
- link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearch[$$Elasticsearch$$]
--

[id="elasticsearch-k8s-elastic-co-v1beta1-elasticsearch"]
[float]
==== Elasticsearch

Elasticsearch is the Schema for the elasticsearches API
[cols="20a,80a", options="header"]
|===
|Field |Description
| *`apiVersion`*  +
_string_
| `elasticsearch.k8s.elastic.co/v1beta1`

| *`kind`*  +
_string_
| `Elasticsearch`

| *`metadata`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta[$$Kubernetes meta/v1.ObjectMeta$$]_
|
---
Refer to the Kubernetes API documentation for the fields of the `metadata` field.
| *`spec`* +
_link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec[$$ElasticsearchSpec$$]_
|
---

*`version`*  _string_::
Version represents the version of the stack
*`image`*  _string_::
Image represents the docker image that will be used.
*`http`* _link:#common-k8s-elastic-co-v1beta1-httpconfig[$$HTTPConfig$$]_::
HTTP contains settings for HTTP.
*`nodeSets`* _link:#elasticsearch-k8s-elastic-co-v1beta1-nodeset[$$[]NodeSet$$]_::
NodeSets represents a list of groups of nodes with the same configuration to be part of the cluster
*`updateStrategy`* _link:#elasticsearch-k8s-elastic-co-v1beta1-updatestrategy[$$UpdateStrategy$$]_::
UpdateStrategy specifies how updates to the cluster should be performed.
*`podDisruptionBudget`* _link:#common-k8s-elastic-co-v1beta1-poddisruptionbudgettemplate[$$PodDisruptionBudgetTemplate$$]_::
PodDisruptionBudget allows full control of the default pod disruption budget.

The default budget selects all cluster pods and sets maxUnavailable to 1.
To disable it entirely, set to the empty value (`{}` in YAML).
*`secureSettings`* _link:#common-k8s-elastic-co-v1beta1-secretsource[$$[]SecretSource$$]_::
SecureSettings references secrets containing secure settings, to be injected
into Elasticsearch keystore on each node.
Each individual key/value entry in the referenced secrets is considered as an
individual secure setting to be injected.
You can use the `entries` and `key` fields to consider only a subset of the secret
entries and the `path` field to change the target path of a secret entry key.
The secret must exist in the same namespace as the Elasticsearch resource.
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-changebudget"]
[float]
==== ChangeBudget
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-updatestrategy[UpdateStrategy]
)

ChangeBudget defines how Pods in a single group should be updated.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`maxUnavailable`* +
_int32_
|
MaxUnavailable is the maximum number of pods that can be unavailable (not ready) during the update due to the
actions controlled by the operator. Setting negative value will result in no restrictions on number of unavailable
pods. By default, a fixed value of 1 is used.
| *`maxSurge`* +
_int32_
|
MaxSurge is the maximum number of pods that can be scheduled above the original number of pods. MaxSurge
is only taken into the account when scaling up. Setting negative value will result in no restrictions on number
of pods scheduled. By default, it's unbounded.
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-clustersettings"]
[float]
==== ClusterSettings
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchsettings[ElasticsearchSettings]
)

ClusterSettings is the cluster node in elasticsearch.yml.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`InitialMasterNodes`* +
_[]string_
|
---
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-elasticsearchsettings"]
[float]
==== ElasticsearchSettings

ElasticsearchSettings is a typed subset of elasticsearch.yml for purposes of the operator.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`Node`* +
_link:#elasticsearch-k8s-elastic-co-v1beta1-node[$$Node$$]_
|
---
| *`Cluster`* +
_link:#elasticsearch-k8s-elastic-co-v1beta1-clustersettings[$$ClusterSettings$$]_
|
---
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec"]
[float]
==== ElasticsearchSpec
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearch[Elasticsearch]
)

ElasticsearchSpec defines the desired state of Elasticsearch
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`version`* +
_string_
|
Version represents the version of the stack
| *`image`* +
_string_
|
Image represents the docker image that will be used.
| *`http`* +
_link:#common-k8s-elastic-co-v1beta1-httpconfig[$$HTTPConfig$$]_
|
HTTP contains settings for HTTP.
| *`nodeSets`* +
_link:#elasticsearch-k8s-elastic-co-v1beta1-nodeset[$$[]NodeSet$$]_
|
NodeSets represents a list of groups of nodes with the same configuration to be part of the cluster
| *`updateStrategy`* +
_link:#elasticsearch-k8s-elastic-co-v1beta1-updatestrategy[$$UpdateStrategy$$]_
|
UpdateStrategy specifies how updates to the cluster should be performed.
| *`podDisruptionBudget`* +
_link:#common-k8s-elastic-co-v1beta1-poddisruptionbudgettemplate[$$PodDisruptionBudgetTemplate$$]_
|
PodDisruptionBudget allows full control of the default pod disruption budget.

The default budget selects all cluster pods and sets maxUnavailable to 1.
To disable it entirely, set to the empty value (`{}` in YAML).
| *`secureSettings`* +
_link:#common-k8s-elastic-co-v1beta1-secretsource[$$[]SecretSource$$]_
|
SecureSettings references secrets containing secure settings, to be injected
into Elasticsearch keystore on each node.
Each individual key/value entry in the referenced secrets is considered as an
individual secure setting to be injected.
You can use the `entries` and `key` fields to consider only a subset of the secret
entries and the `path` field to change the target path of a secret entry key.
The secret must exist in the same namespace as the Elasticsearch resource.
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-node"]
[float]
==== Node
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchsettings[ElasticsearchSettings]
)

Node is the node section in elasticsearch.yml.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`Master`* +
_bool_
|
---
| *`Data`* +
_bool_
|
---
| *`Ingest`* +
_bool_
|
---
| *`ML`* +
_bool_
|
---
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-nodeset"]
[float]
==== NodeSet
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec[ElasticsearchSpec]
)

NodeSet defines a common topology for a set of Elasticsearch nodes
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`name`* +
_string_
|
Name is a logical name for this set of nodes. Used as a part of the managed Elasticsearch node.name setting.
| *`config`* +
_link:#common-k8s-elastic-co-v1beta1-config[$$Config$$]_
|
Config represents Elasticsearch configuration.
| *`count`* +
_int32_
|
Count defines how many nodes this topology should have.
| *`podTemplate`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#podtemplatespec-v1-core[$$Kubernetes core/v1.PodTemplateSpec$$]_
|
PodTemplate can be used to propagate configuration to Elasticsearch pods.
This allows specifying custom annotations, labels, environment variables,
volumes, affinity, resources, etc. for the pods created from this NodeSet.
| *`volumeClaimTemplates`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#persistentvolumeclaim-v1-core[$$[]Kubernetes core/v1.PersistentVolumeClaim$$]_
|
VolumeClaimTemplates is a list of claims that pods are allowed to reference.
Every claim in this list must have at least one matching (by name) volumeMount in one
container in the template. A claim in this list takes precedence over
any volumes in the template, with the same name.
TODO: Define the behavior if a claim already exists with the same name.
TODO: define special behavior based on claim metadata.name. (e.g data / logs volumes)
|===

[id="elasticsearch-k8s-elastic-co-v1beta1-updatestrategy"]
[float]
==== UpdateStrategy
(*Appears on:*
link:#elasticsearch-k8s-elastic-co-v1beta1-elasticsearchspec[ElasticsearchSpec]
)

UpdateStrategy specifies how updates to the cluster should be performed.
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`changeBudget`* +
_link:#elasticsearch-k8s-elastic-co-v1beta1-changebudget[$$ChangeBudget$$]_
|
ChangeBudget is the change budget that should be used when performing mutations to the cluster.
|===
[id="kibana-k8s-elastic-co-v1beta1"]
[float]
=== kibana.k8s.elastic.co/v1beta1
Package v1beta1 contains API Schema definitions for the kibana v1beta1 API group

.Resource Types
--
- link:#kibana-k8s-elastic-co-v1beta1-kibana[$$Kibana$$]
--

[id="kibana-k8s-elastic-co-v1beta1-kibana"]
[float]
==== Kibana

Kibana is the Schema for the kibanas API
[cols="20a,80a", options="header"]
|===
|Field |Description
| *`apiVersion`*  +
_string_
| `kibana.k8s.elastic.co/v1beta1`

| *`kind`*  +
_string_
| `Kibana`

| *`metadata`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta[$$Kubernetes meta/v1.ObjectMeta$$]_
|
---
Refer to the Kubernetes API documentation for the fields of the `metadata` field.
| *`spec`* +
_link:#kibana-k8s-elastic-co-v1beta1-kibanaspec[$$KibanaSpec$$]_
|
---

*`version`*  _string_::
Version represents the version of Kibana
*`image`*  _string_::
Image represents the docker image that will be used.
*`count`*  _int32_::
Count defines how many nodes the Kibana deployment must have.
*`elasticsearchRef`* _link:#common-k8s-elastic-co-v1beta1-objectselector[$$ObjectSelector$$]_::
ElasticsearchRef references an Elasticsearch resource in the Kubernetes cluster.
If the namespace is not specified, the current resource namespace will be used.
*`config`* _link:#common-k8s-elastic-co-v1beta1-config[$$Config$$]_::
Config represents Kibana configuration.
*`http`* _link:#common-k8s-elastic-co-v1beta1-httpconfig[$$HTTPConfig$$]_::
HTTP contains settings for HTTP.
*`podTemplate`* _link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#podtemplatespec-v1-core[$$Kubernetes core/v1.PodTemplateSpec$$]_::
PodTemplate can be used to propagate configuration to Kibana pods.
This allows specifying custom annotations, labels, environment variables,
affinity, resources, etc. for the pods created from this spec.
*`secureSettings`* _link:#common-k8s-elastic-co-v1beta1-secretsource[$$[]SecretSource$$]_::
SecureSettings references secrets containing secure settings, to be injected
into Kibana keystore on each node.
Each individual key/value entry in the referenced secrets is considered as an
individual secure setting to be injected.
You can use the `entries` and `key` fields to consider only a subset of the secret
entries and the `path` field to change the target path of a secret entry key.
The secret must exist in the same namespace as the Kibana resource.
|===

[id="kibana-k8s-elastic-co-v1beta1-kibanaspec"]
[float]
==== KibanaSpec
(*Appears on:*
link:#kibana-k8s-elastic-co-v1beta1-kibana[Kibana]
)

KibanaSpec defines the desired state of Kibana
[cols="20a,80a", options="header"]
|===
|Field |Description

| *`version`* +
_string_
|
Version represents the version of Kibana
| *`image`* +
_string_
|
Image represents the docker image that will be used.
| *`count`* +
_int32_
|
Count defines how many nodes the Kibana deployment must have.
| *`elasticsearchRef`* +
_link:#common-k8s-elastic-co-v1beta1-objectselector[$$ObjectSelector$$]_
|
ElasticsearchRef references an Elasticsearch resource in the Kubernetes cluster.
If the namespace is not specified, the current resource namespace will be used.
| *`config`* +
_link:#common-k8s-elastic-co-v1beta1-config[$$Config$$]_
|
Config represents Kibana configuration.
| *`http`* +
_link:#common-k8s-elastic-co-v1beta1-httpconfig[$$HTTPConfig$$]_
|
HTTP contains settings for HTTP.
| *`podTemplate`* +
_link:https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#podtemplatespec-v1-core[$$Kubernetes core/v1.PodTemplateSpec$$]_
|
PodTemplate can be used to propagate configuration to Kibana pods.
This allows specifying custom annotations, labels, environment variables,
affinity, resources, etc. for the pods created from this spec.
| *`secureSettings`* +
_link:#common-k8s-elastic-co-v1beta1-secretsource[$$[]SecretSource$$]_
|
SecureSettings references secrets containing secure settings, to be injected
into Kibana keystore on each node.
Each individual key/value entry in the referenced secrets is considered as an
individual secure setting to be injected.
You can use the `entries` and `key` fields to consider only a subset of the secret
entries and the `path` field to change the target path of a secret entry key.
The secret must exist in the same namespace as the Kibana resource.
|===