#!/usr/bin/env bash

# Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
# or more contributor license agreements. Licensed under the Elastic License 2.0;
# you may not use this file except in compliance with the Elastic License 2.0.

# Script to setup environment variables and deployer config to run CI tasks.
#
# Usage: setenvconfig ENV

set -eu
set -o pipefail

ROOT=$(dirname $0)/..

write_env()               { tee $ROOT/.env; }
write_deployer_config()   { cat > $ROOT/deployer-config.yml; }
write_stack_version_def() { cat > $ROOT/stack-versions-def.json; }

PROJECT_PATH=/go/src/github.com/elastic/cloud-on-k8s
if [[ "${BUILDKITE_AGENT_NAME:-}" =~ k8s ]]; then
  PROJECT_PATH=$(pwd)
fi

# need to be declared but not required for local/buildkite execution
VAULT_ROLE_ID="${VAULT_ROLE_ID:-dev}"
VAULT_SECRET_ID="${VAULT_SECRET_ID:-dev}"

environment=${1:-""}

# Jenkins
if [[ ${BUILD_ID:-} != "" ]]; then

  CI_PLATFORM=jks
  VAULT_ROOT_PATH="secret/devops-ci/cloud-on-k8s"

  # BUILD_NUMBER is set by Jenkins
  # JOB_NAME is set by Jenkins
  # GCLOUD_PROJECT, VAULT_ROLE_ID and VAULT_SECRET_ID are set in the Jenkins pipeline definitions

# Buildkite
elif [[ ${BUILDKITE_BUILD_ID:-} != "" ]]; then

  CI_PLATFORM=bk

  VAULT_ROOT_PATH="secret/ci/elastic-cloud-on-k8s"

  GCLOUD_PROJECT=$(vault read -field=gcloud_project ${VAULT_ROOT_PATH}/k8s)

  BUILD_NUMBER=${BUILDKITE_BUILD_NUMBER}
  JOB_NAME=${BUILDKITE_PIPELINE_NAME}

  JKS_PARAM_OPERATOR_IMAGE=$(buildkite-agent meta-data get operator-image)

# Dev local execution
else

  CI_PLATFORM=dev

  VAULT_ROOT_PATH="secret/devops-ci/cloud-on-k8s"

  BUILD_NUMBER=0 # keeping all build_numbers as numbers

fi

# main

# default empty stack version definition common to all environments to allow uniform invocation of the e2e test runner
write_stack_version_def <<ENV
[]
ENV

case $environment in

######################################
  e2e/aks)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-aks-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/aks
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=aks
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: aks-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  e2e/custom)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-custom-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
REGISTRY_NAMESPACE=eck-snapshots
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json
TESTS_MATCH=$TESTS_MATCH
E2E_TAGS=$TEST_TAGS

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/custom
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=gke
CLUSTER_NAME=${${clusterName}}
TEST_OPTS=-race
ENV
write_deployer_config <<CFG
id: gke-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
write_stack_version_def <<ENV
[
  {
    "kind": "Elasticsearch",
    "image": "${ELASTICSEARCH_IMAGE:-}",
    "version": "${ELASTICSEARCH_VERSION:-}"
  },
  {
    "kind": "Kibana",
    "image": "${KIBANA_IMAGE:-}",
    "version": "${KIBANA_VERSION:-}"
  },
  {
    "kind": "Agent",
    "image": "${ELASTIC_AGENT_IMAGE:-}",
    "version": "${ELASTIC_AGENT_VERSION:-}"
  },
  {
    "kind": "FleetServer",
    "image": "${FLEET_SERVER_IMAGE:-}",
    "version": "${FLEET_SERVER_VERSION:-}"
  },
  {
    "kind": "EnterpriseSearch",
    "image": "${ENTERPRISE_SEARCH_IMAGE:-}",
    "version": "${ENTERPRISE_SEARCH_VERSION:-}"
  },
  {
    "kind": "ElasticMapsServer",
    "image": "${ELASTIC_MAPS_SERVER_IMAGE:-}",
    "version": "${ELASTIC_MAPS_SERVER_VERSION:-}"
  }
]
ENV
;;

######################################
  e2e/gke-k8s-versions)
######################################

gkeVersion=${2}
generatedClusterName="eck-${CI_PLATFORM}-e2e-gke-$(sed "s|\.||g" <<< $gkeVersion)-${BUILD_NUMBER}"
clusterName=${3:-$generatedClusterName}

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/gke-k8s-versions
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=gke
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: gke-ci
overrides:
  operation: create
  kubernetesVersion: "${gkeVersion}"
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  e2e/kind-k8s-versions)
######################################

kindNodeImage=$2
kindVersion=$3
ipFamily=$4
clusterName="eck-${CI_PLATFORM}-e2e-kind-$(sed "s|\.||g" <<< $kindVersion)-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/kind-k8s-versions
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=kind
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_TEST_ENV_TAGS="kind,$ipFamily"
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: kind-ci
overrides:
  clusterName: ${clusterName}
  clientVersion: ${kindVersion}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  kind:
    nodeImage: ${kindNodeImage}
    ipFamily: ${ipFamily}
CFG
;;

######################################
  e2e/main)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-main-${BUILD_NUMBER}"

TESTS_MATCH="${TESTS_MATCH:-^Test}"
E2E_TAGS="${E2E_TAGS:-e2e}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

PIPELINE=e2e/main
BUILD_NUMBER=$BUILD_NUMBER
JOB_NAME=$JOB_NAME
E2E_PROVIDER=gke
CLUSTER_NAME=${clusterName}
TESTS_MATCH=$TESTS_MATCH
TEST_OPTS=-race
E2E_TAGS=$E2E_TAGS
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: gke-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  e2e/resilience)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-resilience-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

E2E_DEPLOY_CHAOS_JOB=true
IMG_SUFFIX=-ci
REGISTRY_NAMESPACE=eck-snapshots
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
export E2E_DEPLOY_CHAOS_JOB=true
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

PIPELINE=e2e/resilience
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=gke
OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: gke-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  e2e/ocp)
######################################

ocpVersion=$2
clusterName="eck-${CI_PLATFORM}-e2e-ocp-$(sed "s|\.||g" <<< ${ocpVersion})-$BUILD_NUMBER"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/ocp
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=ocp
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: ocp-ci
overrides:
  clusterName: ${clusterName}
  clientVersion: ${ocpVersion}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  ocp:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  e2e/ocp3)
######################################

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/ocp3
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=ocp3
CLUSTER_NAME=eck-ocp3-$BUILD_NUMBER
TEST_OPTS=-race
ENV
write_deployer_config <<CFG
id: ocp3-ci
overrides:
  clusterName: eck-ocp3-$BUILD_NUMBER
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  ocp3:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  e2e/eks)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-eks-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/eks
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=eks
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
ENV
write_deployer_config <<CFG
id: eks-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  e2e/eks-arm)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-eks-arm-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
E2E_TAGS=es kb apm ent beat agent
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json disabled b/c https://github.com/elastic/elasticsearch/issues/68083
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json disabled b/c beats cannot run on ARM

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/eks-arm
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=eks
CLUSTER_NAME=${clusterName}
KUBERNETES_VERSION=default
TEST_OPTS=-race
E2E_TEST_ENV_TAGS="arch:arm"
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: eks-arm-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  e2e/tanzu)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-tanzu-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE

PIPELINE=e2e/tanzu
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=tanzu
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: tanzu-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG

;;
######################################
  e2e/stack-versions)
######################################

stackVersion=$2
generatedClusterName="eck-${CI_PLATFORM}-e2e-stack-$(sed "s|\.||g" <<< $stackVersion)-${BUILD_NUMBER}"
clusterName=${3:-$generatedClusterName}

buildLicensePubkey=$(case $stackVersion in (*-SNAPSHOT)  echo dev;; esac)
testLicensePKeyPath=$(case $buildLicensePubkey in (dev) echo "${PROJECT_PATH}/.ci/dev-private.key";; esac)
operatorImage=${OPERATOR_IMAGE:-$JKS_PARAM_OPERATOR_IMAGE}

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-ci
E2E_REGISTRY_NAMESPACE=eck-ci
BUILD_LICENSE_PUBKEY=${buildLicensePubkey}

TEST_LICENSE=${PROJECT_PATH}/.ci/test-license.json
TEST_LICENSE_PKEY_PATH=$testLicensePKeyPath
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

OPERATOR_IMAGE=${operatorImage}
E2E_STACK_VERSION=${stackVersion}

PIPELINE=e2e/stack-versions
BUILD_NUMBER=$BUILD_NUMBER
E2E_PROVIDER=gke
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
E2E_JSON=true
ENV
write_deployer_config <<CFG
id: gke-ci
overrides:
  operation: create
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  pr)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-pr-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

OPERATOR_IMAGE=$JKS_PARAM_OPERATOR_IMAGE
E2E_REGISTRY_NAMESPACE=eck-ci

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key

TESTS_MATCH=TestSmoke
MONITORING_SECRETS=${PROJECT_PATH}/.ci/monitoring-secrets.json

PIPELINE=pr
BUILD_NUMBER=$BUILD_NUMBER
E2E_JSON=true
E2E_PROVIDER=kind
CLUSTER_NAME=${clusterName}
TEST_OPTS=-race
BUILD_PLATFORM=linux/amd64

ENV
write_deployer_config <<CFG
id: kind-ci
overrides:
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  build)
######################################

  WORKSPACE=${WORKSPACE:-$ROOT}

  # valid the existence of the $WORKSPACE/VERSION file
  if [[ ! -f $WORKSPACE/VERSION ]]; then
    echo "$WORKSPACE/VERSION not found"
    exit
  fi

  # choose between a nightly or a release build based on TAG_NAME
  if [[ ${TAG_NAME:-} == "" ]]; then

###############
# nightly build
###############

# IMG_VERSION is generated

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

REGISTRY_NAMESPACE=eck-snapshots
IMG_SUFFIX=

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key

SNAPSHOT=true
IMG_VERSION=$(cat $WORKSPACE/VERSION)-$(date +%F)-$(git rev-parse --short --verify HEAD)
ENV

  else

###############
# release build
###############

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

REGISTRY_NAMESPACE=eck
IMG_SUFFIX=

GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key

SNAPSHOT=false
PUBLISH_IMAGE_UBI=true
PUBLISH_IMAGE_DOCKERHUB=true
IMG_VERSION=${TAG_NAME#"v"}
ENV

  fi
;;

######################################
  dev/build)
######################################

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH

IMG_SUFFIX=-dev-ci
REGISTRY_NAMESPACE=eck-snapshots
E2E_REGISTRY_NAMESPACE=eck-ci
BUILD_LICENSE_PUBKEY=dev
GO_TAGS=release
export LICENSE_PUBKEY=${PROJECT_PATH}/.ci/license.key
ENV
;;


######################################
  cleanup/gke)
######################################

gkeVersion=${2:-x}
generatedClusterName="eck-${CI_PLATFORM}-e2e-gke-$(sed "s|\.||g" <<< $gkeVersion)-${BUILD_NUMBER}"
clusterName=${JKS_PARAM_GKE_CLUSTER:-$generatedClusterName}

write_deployer_config <<CFG
id: gke-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  cleanup/main)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-main-${BUILD_NUMBER}"

write_deployer_config <<CFG
id: gke-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  cleanup/resilience)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-resilience-${BUILD_NUMBER}"

write_deployer_config <<CFG
id: gke-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  gke:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  cleanup/aks)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-aks-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH
ENV

write_deployer_config <<CFG
id: aks-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  cleanup/tanzu)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-tanzu-${BUILD_NUMBER}"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH
ENV

write_deployer_config <<CFG
id: tanzu-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  cleanup/eks)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-eks-${BUILD_NUMBER}"

write_deployer_config <<CFG
id: eks-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  cleanup/eks-arm)
######################################

clusterName="eck-${CI_PLATFORM}-e2e-eks-arm-${BUILD_NUMBER}"

write_deployer_config <<CFG
id: eks-arm-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
CFG
;;

######################################
  cleanup/ocp)
######################################

ocpVersion=$2
clusterName="eck-${CI_PLATFORM}-e2e-ocp-$(sed "s|\.||g" <<< ${ocpVersion})-$BUILD_NUMBER"

write_env <<ENV
export VAULT_ROOT_PATH=$VAULT_ROOT_PATH
ENV

write_deployer_config <<CFG
id: ocp-ci
overrides:
  operation: delete
  clusterName: ${clusterName}
  clientVersion: ${ocpVersion}
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  ocp:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  cleanup/ocp3)
######################################

write_deployer_config <<CFG
id: ocp3-ci
overrides:
  operation: delete
  clusterName: eck-ocp3-$BUILD_NUMBER
  vaultInfo:
    address: $VAULT_ADDR
    roleId: $VAULT_ROLE_ID
    secretId: $VAULT_SECRET_ID
    rootPath: $VAULT_ROOT_PATH
  ocp3:
    gCloudProject: $GCLOUD_PROJECT
CFG
;;

######################################
  *)
    echo -e "\nError: invalid environment\n"
    echo 'Environments available:'
    grep -ro '^\s\s*[a-z].*)$' $0 | sed "s/)//"
    exit 1
  ;;

esac
