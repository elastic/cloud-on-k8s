
agents:
  image: docker.elastic.co/ci-agent-images/cloud-k8s-operator/buildkite-agent:latest
  cpu: "4"
  memory: "2G"

steps:

  - group: build
    steps:

      - label: ":docker: operator container image"
        key: "operator-image-build"
        commands:
          - .ci/setenvconfig pr
          - .buildkite/scripts/common/get-test-artifacts.sh
          - make operator-buildah

      - label: ":docker: e2e-tests container image"
        key: "e2e-tests-image-build"
        commands:
          - .ci/setenvconfig pr
          - .buildkite/scripts/common/get-test-artifacts.sh
          - make e2e-buildah

  - group: checks
    steps:

      - label: ":go: lint"
        command: "make lint check-local-changes"
        agents:
          cpu: "6"
          memory: "6G"

      - label: ":go: generate"
        command: "make generate check-local-changes"

      - label: ":go: checks"
        commands:
          - .ci/setenvconfig pr
          - make check-license-header check-predicates shellcheck reattach-pv

  - group: tests
    steps:

      - label: ":go: unit-tests"
        command: "make unit-xml"
        agents:
          memory: "4G"

      - label: ":go: integration-tests"
        command: "make integration-xml"
        agents:
          memory: "4G"

      - label: ":go: manifest-gen-tests"
        command: "make manifest-gen-test"

      - label: ":go: helm-tests"
        command: "make helm-test"

  # Different e2e tests are run depending on the branch and the build source

  - group: e2e-tests
    steps:

      # Run TestSmoke on Kind on every commit in PR branch

      - label: ":k8s: pr e2e-tests"
        branches: "!main"
        agents:
          provider: "gcp"
          image: "family/elastic-buildkite-agent-ubuntu-2004-lts"
          machineType: "n1-standard-16"
        commands:
            - .ci/setenvconfig pr
            - make -C .ci get-test-artifacts TARGET="run-deployer e2e-run" ci
        artifact_paths:
          - "eck-diagnostic-*.zip"
        depends_on:
          - "operator-image-build"
          - "e2e-tests-image-build"

      # Run all e2e tests on GKE on every commit in main

      - label: ":k8s: main e2e-tests"
        if: build.branch == "main" && build.source != "schedule"
        agents:
          memory: "4G"
        commands:
          - .ci/setenvconfig e2e/main
          - .buildkite/scripts/common/get-test-artifacts.sh
          - make run-deployer
          - make e2e-run
        artifact_paths:
          - "eck-diagnostic-*.zip"
        depends_on:
          - "operator-image-build"
          - "e2e-tests-image-build"

      # Run all e2e tests on all k8s distributions at midnight from the main branch

      - label: ":k8s: nightly e2e-tests"
        if: build.branch == "main" && build.source == "schedule"
        commands:
            - buildkite-agent pipeline upload .buildkite/pipeline-nightly-e2e-tests.yml
        depends_on:
          - "operator-image-build"
          - "e2e-tests-image-build"

  - group: redhat-release

    steps:

      - label: "build operatorhub tool"
        key: "build-operatorhub-tool"
        if: build.message == "run operatorhub release"
        commands:
           - cd hack/operatorhub
           - make build
           - buildkite-agent artifact upload "bin/operator*"

      - label: "Generate CRDs"
        key: "generate-crds"
        if: build.message == "run operatorhub release"
        depends_on:
          - "build-operatorhub-tool"
        commands:
           - git checkout ${OHUB_BRANCH}
           - make generate-crds-v1
        artifact_paths:
        - "config/*.yaml"

      - label: "run container push"
        key: "redhat-container-push"
        if: build.message == "run operatorhub release"
        depends_on:
          - "generate-crds"
        commands:
           - buildkite-agent artifact download "bin/operator*" /usr/local/
           - chmod u+x /usr/local/bin/operatorhub
           - /usr/local/bin/operatorhub container push --dry-run=false

      - label: "run container preflight"
        key: "redhat-preflight"
        if: build.message == "run operatorhub release"
        depends_on:
          - "redhat-container-push"
        commands:
           - curl -o /tmp/preflight https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/1.2.1/preflight-linux-amd64
           - chmod u+x /tmp/preflight
           - vault read -format=json -field=data secret/ci/elastic-cloud-on-k8s/operatorhub-release-preflight > /tmp/auth.json
           - export OHUB_API_KEY=$(vault read -format=json -field=api-key secret/ci/elastic-cloud-on-k8s/operatorhub-release-redhat)
           - export OHUB_PROJECT_ID=$(vault read -format=json -field=project-id secret/ci/elastic-cloud-on-k8s/operatorhub-release-redhat)
           - /tmp/preflight check container quay.io/redhat-isv-containers/${OHUB_PROJECT_ID}:${OHUB_TAG} --pyxis-api-token=${OHUB_API_KEY} --certification-project-id=${OHUB_PROJECT_ID} --submit -d /tmp/auth.json

      - label: "run remaining release"
        key: "redhat-release"
        if: build.message == "run operatorhub release"
        depends_on:
          - "redhat-preflight"
        commands:
           - buildkite-agent artifact download "bin/operator*" /usr/local/
           - buildkite-agent artifact download "config/*.yaml" .
           - chmod u+x /usr/local/bin/operatorhub
           - /usr/local/bin/operatorhub container publish --dry-run=false
           - cd hack/operatorhub
           - /usr/local/bin/operatorhub generate-manifests --prev-version=${OHUB_PREV_VERSION} --stack-version=${OHUB_STACK_VERSION} --yaml-manifest=../../config/crds.yaml --yaml-manifest=../../config/operator.yaml
           - /usr/local/bin/operatorhub bundle generate --dir=$(pwd)
           - /usr/local/bin/operatorhub bundle create-pr --dir=$(pwd)
