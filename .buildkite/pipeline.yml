
agents:
  image: docker.elastic.co/ci-agent-images/cloud-k8s-operator/buildkite-agent:latest
  cpu: "4"
  memory: "2G"

steps:

  - group: build
    steps:

      - label: ":docker: operator container image"
        commands:
          - .ci/setenvconfig pr
          - .buildkite/scripts/common/get-test-artifacts.sh
          - make operator-buildah

      - label: ":docker: e2e-tests container image"
        commands:
          - .ci/setenvconfig pr
          - .buildkite/scripts/common/get-test-artifacts.sh
          - make e2e-buildah

  - group: checks
    steps:

      - label: ":go: lint"
        command: "make lint check-local-changes"
        agents:
          cpu: "6"
          memory: "6G"

      - label: ":go: generate"
        command: "make generate check-local-changes"

      - label: ":go: checks"
        commands:
          - .ci/setenvconfig pr
          - make check-license-header check-predicates shellcheck reattach-pv

  - group: tests
    steps:

      - label: ":go: unit-tests"
        command: "make unit-xml"
        agents:
          memory: "4G"

      - label: ":go: integration-tests"
        command: "make integration-xml"
        agents:
          memory: "4G"

      - label: ":go: manifest-gen-tests"
        command: "make manifest-gen-test"

      - label: ":go: helm-tests"
        command: "make helm-test"

  # Different e2e tests are run depending on the branch and the build source

  - group: e2e-tests
    steps:

      # Run TestSmoke on Kind on every commit in PR branch

      - label: ":k8s: pr e2e-tests"
        branches: "!main"
        agents:
          provider: "gcp"
          image: "family/elastic-buildkite-agent-ubuntu-2004-lts"
          machineType: "n1-standard-16"
        commands:
            - .ci/setenvconfig pr
            - make -C .ci get-test-artifacts TARGET="run-deployer e2e-run" ci
        artifact_paths:
          - "eck-diagnostic-*.zip"

      # Run all e2e tests on GKE on every commit in main

      - label: ":k8s: main e2e-tests"
        if: build.branch == "main" && build.source != "schedule"
        agents:
          memory: "4G"
        commands:
          - .ci/setenvconfig e2e/main
          - .buildkite/scripts/common/get-test-artifacts.sh
          - make run-deployer
          - make e2e-run
        artifact_paths:
          - "eck-diagnostic-*.zip"

      # Run all e2e tests on all k8s distributions at midnight from the main branch

      - label: ":k8s: nightly e2e-tests"
        if: build.branch == "main" && build.source == "schedule"
        commands:
            - buildkite-agent pipeline upload .buildkite/pipeline-nightly-e2e-tests.yml

  - group: redhat-release

    steps:

      - label: "Generate CRDs"
        key: "generate-crds"
        if: build.message == "run redhat release dev"
        commands:
           - make generate-crds-v1

      - label: "run container push"
        key: "redhat-container-push"
        if: build.message == "run redhat release dev"
        depends_on:
          - "generate-crds"
        commands:
           - cd hack/operatorhub
           - make build
           # how is --tag set?
           - ./redhat container push --tag=$TAG

      - label: "run container preflight"
        key: "redhat-preflight"
        if: build.message == "run redhat release dev"
        agents:
          image: "quay.io/opdev/preflight:1.2.1-linux-amd64@sha256:6f63033a934d9a9821cea2247858b0557f471b1f0fc9c4f691ae1c934d44d90b"
        depends_on:
          - "redhat-container-push"
        commands:
           - /usr/local/bin/preflight check container quay.io/redhat-isv-containers/${REDHAT_PROJECT_ID}:${TAG} --pyxis-api-token=${REDHAT_API_TOKEN} --submit

      - label: "run remaining release"
        key: "redhat-release"
        if: build.message == "run redhat release dev"
        depends_on:
          - "redhat-preflight"
        commands:
           # how is --tag set?
           - ./redhat container publish --tag=${TAG} --dry-run=true
           # yaml manifests can NOT be env vars
           - ./redhat operatorhub --prev-version=${PREV_VERSION} --stack-version=${STACK_VERSION} --yaml-manifest=../../config/crds.yaml --yaml-manifest=../../config/operator.yaml
           - ./redhat bundle generate --tag=${TAG} --dir="??"
           - ./redhat bundle create-pr --tag=${TAG} --github-username=blah --github-email=blah --github-fullname=blah --github-token=blah --dry-run=true