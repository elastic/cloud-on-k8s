// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package v1alpha1

import (
	"encoding/json"

	"github.com/elastic/go-ucfg"
)

const (
	NodeData   = "node.data"
	NodeIngest = "node.ingest"
	NodeMaster = "node.master"
	NodeML     = "node.ml"
)

type ClusterSettings struct {
	InitialMasterNodes []string `config:"initial_master_nodes"`
}

type Node struct {
	Master bool `config:"master"`
	Data   bool `config:"data"`
	Ingest bool `config:"ingest"`
	ML     bool `config:"ml"`
}

type ElasticsearchSettings struct {
	Node    Node            `config:"node"`
	Cluster ClusterSettings `config:"cluster"`
}

var defaultCfg = ElasticsearchSettings{
	Node: Node{
		Master: true,
		Data:   true,
		Ingest: true,
		ML:     true,
	},
}

func (e ElasticsearchSettings) EqualRoles(e2 ElasticsearchSettings) bool {
	return e.Node == e2.Node
}

type Config struct {
	Data map[string]interface{}
}

func NewConfig(cfg map[string]interface{}) Config {
	return Config{Data: cfg}
}

func (c *Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Data)
}

func (c *Config) UnmarshalJSON(data []byte) error {
	var out map[string]interface{}
	err := json.Unmarshal(data, &out)
	if err != nil {
		return err
	}
	c.Data = out
	return nil
}

// DeepCopyInto is an ~autogenerated~ deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (c *Config) DeepCopyInto(out *Config) {
	bytes, err := json.Marshal(c.Data)
	if err != nil {
		panic(err)
	}
	var copy map[string]interface{}
	err = json.Unmarshal(bytes, &copy)
	if err != nil {
		panic(err)
	}
	out.Data = copy
	return
}

func (c Config) Canonicalize() (*ucfg.Config, error) {
	return ucfg.NewFrom(c.Data, ucfg.PathSep("."))
}

func (c Config) Unpacked() (ElasticsearchSettings, error) {
	esSettings := defaultCfg // defensive copy
	config, err := c.Canonicalize()
	if err != nil {
		return esSettings, err
	}
	err = config.Unpack(&esSettings, ucfg.PathSep("."))
	return esSettings, err
}
