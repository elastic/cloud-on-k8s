// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

package name

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/elastic/cloud-on-k8s/pkg/apis/elasticsearch/v1beta1"
	common_name "github.com/elastic/cloud-on-k8s/pkg/controller/common/name"
	"github.com/elastic/cloud-on-k8s/pkg/utils/k8s"
	"github.com/pkg/errors"
	apimachineryvalidation "k8s.io/apimachinery/pkg/api/validation"
	"k8s.io/apimachinery/pkg/util/validation"
)

const (
	configSecretSuffix                = "config"
	secureSettingsSecretSuffix        = "secure-settings"
	httpServiceSuffix                 = "http"
	elasticUserSecretSuffix           = "elastic-user"
	xpackFileRealmSecretSuffix        = "xpack-file-realm"
	internalUsersSecretSuffix         = "internal-users"
	unicastHostsConfigMapSuffix       = "unicast-hosts"
	licenseSecretSuffix               = "license"
	defaultPodDisruptionBudget        = "default"
	scriptsConfigMapSuffix            = "scripts"
	transportCertificatesSecretSuffix = "transport-certificates"
)

var (
	// ESNamer is a Namer that is configured with the defaults for resources related to an ES cluster.
	ESNamer = common_name.NewNamer("es")

	suffixes = []string{
		configSecretSuffix,
		secureSettingsSecretSuffix,
		httpServiceSuffix,
		elasticUserSecretSuffix,
		xpackFileRealmSecretSuffix,
		internalUsersSecretSuffix,
		unicastHostsConfigMapSuffix,
		licenseSecretSuffix,
		defaultPodDisruptionBudget,
		scriptsConfigMapSuffix,
		transportCertificatesSecretSuffix,
	}
)

// Validate checks the validity of resource names that will be generated by the given Elasticsearch object.
func Validate(es v1beta1.Elasticsearch) error {
	esName := k8s.ExtractNamespacedName(&es).Name
	if len(esName) > common_name.MaxResourceNameLength {
		return fmt.Errorf("name exceeds maximum allowed length of %d", common_name.MaxResourceNameLength)
	}

	// validate ssets
	for _, nodeSet := range es.Spec.NodeSets {
		if errs := apimachineryvalidation.NameIsDNSSubdomain(nodeSet.Name, false); len(errs) > 0 {
			return fmt.Errorf("invalid nodeSet name '%s': [%s]", nodeSet.Name, strings.Join(errs, ","))
		}

		ssetName, err := ESNamer.SafeSuffix(esName, nodeSet.Name)
		if err != nil {
			return errors.Wrapf(err, "error generating StatefulSet name for nodeSet: '%s'", nodeSet.Name)
		}

		// length of the ordinal suffix that will be added to the pods of this sset (dash + ordinal)
		podOrdinalSuffixLen := len(strconv.FormatInt(int64(nodeSet.Count), 10)) + 1
		// there should be enough space for the ordinal suffix
		if validation.DNS1123SubdomainMaxLength-len(ssetName) < podOrdinalSuffixLen {
			return fmt.Errorf("generated StatefulSet name '%s' exceeds allowed length of %d",
				ssetName,
				validation.DNS1123SubdomainMaxLength-podOrdinalSuffixLen)
		}
	}

	// validate other suffixes
	for _, suffix := range suffixes {
		if _, err := ESNamer.SafeSuffix(esName, suffix); err != nil {
			return err
		}
	}

	return nil
}

// StatefulSet returns the name of the StatefulSet corresponding to the given NodeSet.
func StatefulSet(esName string, nodeSpecName string) string {
	return ESNamer.Suffix(esName, nodeSpecName)
}

func ConfigSecret(ssetName string) string {
	return ESNamer.Suffix(ssetName, configSecretSuffix)
}

func SecureSettingsSecret(esName string) string {
	return ESNamer.Suffix(esName, secureSettingsSecretSuffix)
}

func TransportCertificatesSecret(esName string) string {
	return ESNamer.Suffix(esName, transportCertificatesSecretSuffix)
}

func HTTPService(esName string) string {
	return ESNamer.Suffix(esName, httpServiceSuffix)
}

func ElasticUserSecret(esName string) string {
	return ESNamer.Suffix(esName, elasticUserSecretSuffix)
}

func XPackFileRealmSecret(esName string) string {
	return ESNamer.Suffix(esName, xpackFileRealmSecretSuffix)
}

func InternalUsersSecret(esName string) string {
	return ESNamer.Suffix(esName, internalUsersSecretSuffix)
}

// UnicastHostsConfigMap returns the name of the ConfigMap that holds the list of seed nodes for a given cluster.
func UnicastHostsConfigMap(esName string) string {
	return ESNamer.Suffix(esName, unicastHostsConfigMapSuffix)
}

func ScriptsConfigMap(esName string) string {
	return ESNamer.Suffix(esName, scriptsConfigMapSuffix)
}

func LicenseSecretName(esName string) string {
	return ESNamer.Suffix(esName, licenseSecretSuffix)
}

func DefaultPodDisruptionBudget(esName string) string {
	return ESNamer.Suffix(esName, defaultPodDisruptionBudget)
}
