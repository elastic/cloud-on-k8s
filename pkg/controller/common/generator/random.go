// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

package generator

import (
	"context"

	"github.com/sethvargo/go-password/password"

	"github.com/elastic/cloud-on-k8s/v3/pkg/controller/common/license"
	"github.com/elastic/cloud-on-k8s/v3/pkg/utils/k8s"
)

// ByteGeneratorParams defines the parameters for generating random bytes
// for uses such as service accounts and passwords.
type ByteGeneratorParams struct {
	LowerLetters string
	UpperLetters string
	Digits       string
	Symbols      string
	Length       int
}

// RandomBytesRespectingLicense generates random bytes according to the Elastic license.
// 1. For basic license, it generates a length of 24 random bytes using alphanumeric characters.
// 2. For enterprise license, it allows control over both the length of the generated bytes and the character set.
func RandomBytesRespectingLicense(ctx context.Context, client k8s.Client, namespace string, params ByteGeneratorParams) ([]byte, error) {
	enabled, err := license.NewLicenseChecker(client, namespace).EnterpriseFeaturesEnabled(ctx)
	if err != nil {
		return nil, err
	}
	if enabled {
		return RandomBytes(params)
	}
	return FixedLengthRandomBytes(24), nil
}

// FixedLengthRandomBytes generates random bytes with the given length and the default character set
// than is both used for:
// 1. File-based passwords for users with a basic license.
// 2. Encryption keys for Kibana and EnterpriseSearch.
func FixedLengthRandomBytes(length int) []byte {
	return []byte(password.MustGenerate(
		length,
		10,    // number of digits to include in the result
		0,     // number of symbols to include in the result
		false, // noUpper
		true,  // allowRepeat
	))
}

// RandomBytes generates random bytes that can be used as a token or as a key using the provided parameters.
// This provides Enterprise licensed users more control over password generation.
func RandomBytes(params ByteGeneratorParams) ([]byte, error) {
	generator, err := password.NewGenerator(&password.GeneratorInput{
		LowerLetters: params.LowerLetters,
		UpperLetters: params.UpperLetters,
		Digits:       params.Digits,
		Symbols:      params.Symbols,
	})
	if err != nil {
		return nil, err
	}
	// Generate the random bytes with 1/2 being digits and symbols (if possible), including uppercase letters
	// and allowing repeating characters. This attempts to use 1/4 of the length for digits and another 1/4
	// for symbols, unless the user has requested fewer potential digits or symbols.
	str, err := generator.Generate(
		params.Length,
		min(params.Length/4, len(params.Digits)),  // number of digits to include in the result
		min(params.Length/4, len(params.Symbols)), // number of symbols to include in the result
		false, // noUpper
		true,  // allowRepeat
	)
	return []byte(str), err
}
