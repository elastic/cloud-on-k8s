// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

package common

import (
	"context"
	"fmt"

	"github.com/sethvargo/go-password/password"

	"github.com/elastic/cloud-on-k8s/v3/pkg/controller/common/license"
	"github.com/elastic/cloud-on-k8s/v3/pkg/controller/common/operator"
	"github.com/elastic/cloud-on-k8s/v3/pkg/utils/k8s"
)

// FixedLengthRandomPasswordBytes generates a random password
func FixedLengthRandomPasswordBytes() []byte {
	return RandomBytes(24)
}

// RandomBytes generates some random bytes that can be used as a token or as a key
func RandomBytes(length int) []byte {
	return []byte(password.MustGenerate(
		length,
		10,    // number of digits to include in the result
		0,     // number of symbols to include in the result
		false, // noUpper
		true,  // allowRepeat
	))
}

// RandomBytesRespectingLicense generates random bytes according to the Elastic license.
// 1. For basic license, it generates a length of 24 random bytes using alphanumeric characters.
// 2. For enterprise license, it allows control over both the length of the generated bytes and the character set.
func RandomBytesRespectingLicense(ctx context.Context, client k8s.Client, namespace string, params operator.PasswordGeneratorParams) ([]byte, error) {
	enabled, err := license.NewLicenseChecker(client, namespace).EnterpriseFeaturesEnabled(ctx)
	if err != nil {
		return nil, err
	}
	if enabled {
		generator, err := password.NewGenerator(&password.GeneratorInput{
			LowerLetters: params.LowerLetters,
			UpperLetters: params.UpperLetters,
			Digits:       params.Digits,
			Symbols:      params.Symbols,
		})
		if err != nil {
			return nil, fmt.Errorf("while creating password generator: %w", err)
		}
		data, err := generator.Generate(
			params.Length,
			min(params.Length/4, len(params.Digits)),  // number of digits to include in the result
			min(params.Length/4, len(params.Symbols)), // number of symbols to include in the result
			false, // noUpper
			true,  // allowRepeat
		)
		if err != nil {
			return nil, fmt.Errorf("while generating random bytes for password: %w", err)
		}
		return []byte(data), nil
	}
	// For basic license, use the original fixed behavior
	return RandomBytes(24), nil
}
