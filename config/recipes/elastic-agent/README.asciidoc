= Elastic Agent Configuration Examples

This directory contains yaml manifests with example configurations for Elastic Agent. These manifests are self-contained and work out-of-the-box on any non-secured Kubernetes cluster. All of them contain a three-node Elasticsearch cluster, a single Kibana instance and all required RBAC resources.

IMPORTANT: These examples are for illustration purposes only and should not be considered to be production-ready.

CAUTION: Some of these examples use the `node.store.allow_mmap: false` configuration value to avoid configuring memory mapping settings on the underlying host. This could have a significant performance impact on your Elasticsearch clusters and should not be used in production without careful consideration. See https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html for more information.

==== Standalone mode

===== System integration - `system-integration.yaml`

Deploys Elastic Agent as a DaemonSet in standalone mode with system integration enabled. Collects syslog logs, auth logs and system metrics (for CPU, I/O, filesystem, memory, network, process and others).

===== Kubernetes integration - `kubernetes-integration.yaml`

Deploys Elastic Agent as a DaemonSet in standalone mode with Kubernetes integration enabled. Collects API server, Container, Event, Node, Pod, Volume and system metrics.

===== Multiple Elasticsearch clusters output

[source,sh,subs="attributes"]
----
kubectl apply -f {agent_recipes}/multi-output.yaml
----

Deploys two Elasticsearch clusters and two Kibana instances together with single Elastic Agent DaemonSet in standalone mode with System integration enabled. System metrics are sent to the `elasticsearch` cluster. Elastic Agent monitoring data is sent to `elasticsearch-mon` cluster.

==== Fleet mode

===== System and Kubernetes integrations - `fleet-kubernetes-integration.yaml`

Deploys Elastic Agent as a DaemonSet in Fleet mode with System and Kubernetes integrations enabled. System integration collects syslog logs, auth logs and system metrics (for CPU, I/O, filesystem, memory, network, process and others). Kubernetes integrations collects API server, Container, Event, Node, Pod, Volume and system metrics.

===== System and Kubernetes integrations running as non-root - `fleet-kubernetes-integration-nonroot.yaml`

The provided example is functionally identical to the previous section but runs the Elastic Agent processes (both the Elastic Agent running as the Fleet server and the Elastic Agent connected to Fleet) as a non-root user by utilizing a DaemonSet to ensure directory and file permissions. *Note* The DaemonSet itself must run as root to set up permissions and ECK >= 2.10.0 is required.

===== Custom logs integration with autodiscover - `fleet-custom-logs-integration.yaml`

Deploys Elastic Agent as a DaemonSet in Fleet mode with Custom Logs integration enabled. Collects logs from all Pods in the `default` namespace using autodiscover feature.

===== APM integration - `fleet-apm-integration.yaml`

Deploys single instance Elastic Agent Deployment in Fleet mode with APM integration enabled.

===== Synthetic monitoring - `synthetic-monitoring.yaml`

Deploys an Fleet-enrolled Elastic Agent that can be used as for link:https://www.elastic.co/guide/en/observability/current/monitor-uptime-synthetics.html[Synthetic monitoring]. This Elastic Agent uses the `elastic-agent-complete` image. The agent policy still needs to be link:https://www.elastic.co/guide/en/observability/current/synthetics-private-location.html#synthetics-private-location-add[registered as private location] in Kibana.

===== Fleet Server exposed both internally and externally - `fleet-ingress-setup.yaml`

This example shows how to expose the Fleet Server to the outside world using a Kubernetes Ingress resource. The Fleet Server is configured to use custom TLS certificates, and all communications are secured with TLS. The same Fleet Server is also accessible from within the cluster, allowing agents to connect to it regardless of their location. Refer to the comments in the `fleet-ingress-setup.yaml` file for more details on how to set up the Ingress resource and TLS certificates to enable this configuration.