= Secure your cluster with Pod Security Policies

NOTE: PodSecurityPolicy is deprecated in Kubernetes 1.21 and will be removed in 1.25

This recipe contains an example a PodSecurityPolicies tailored for the use with the Elastic stack. Please read the corresponding link:https://kubernetes.io/docs/concepts/policy/pod-security-policy/[Kubernetes documentation] on how to enable the PodSecurityPolicy admission controller in your cluster.


[source,yaml]
----
include::elastic-psp.yaml[]
----

Please also note that you have to authorize the policy with a role binding:

[source,yaml]
----

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: elastic-restricted
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  resourceNames:
  - elastic.restricted
  verbs:
  - use
----

You also have to bind that role to a user or service account or a group of users. Again the link:https://kubernetes.io/docs/concepts/policy/pod-security-policy/[Kubernetes documentation] has all the details

[source,yaml]
----
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: <binding name>
roleRef:
  kind: ClusterRole
  name: elastic-restricted
  apiGroup: rbac.authorization.k8s.io
subjects:
# Authorize specific service accounts:
- kind: ServiceAccount
  name: <authorized service account name>
  namespace: <authorized pod namespace>
----

Finally, Elastic Agent and Beats need wider access to the host and additional Linux capabilities. They therefore need their own Pod Security Policies. Note that these are different policies tailored to the individual applications.
[source,yaml]
----
include::beats-agent-psp.yaml[]
----
