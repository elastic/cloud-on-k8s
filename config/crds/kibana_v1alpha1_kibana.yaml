apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    controller-tools.k8s.io: "1.0"
  name: kibanas.kibana.k8s.elastic.co
spec:
  additionalPrinterColumns:
  - JSONPath: .status.health
    name: health
    type: string
  - JSONPath: .status.availableNodes
    description: Available nodes
    name: nodes
    type: integer
  - JSONPath: .spec.version
    description: Kibana version
    name: version
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: age
    type: date
  group: kibana.k8s.elastic.co
  names:
    categories:
    - elastic
    kind: Kibana
    plural: kibanas
    shortNames:
    - kb
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            config:
              description: Config represents Kibana configuration.
              type: object
            elasticsearch:
              description: Elasticsearch configures how Kibana connects to Elasticsearch
              properties:
                auth:
                  description: Auth configures authentication for Kibana to use.
                  properties:
                    secret:
                      description: SecretKeyRef is a secret that contains the credentials
                        to use.
                      type: object
                  type: object
                certificateAuthorities:
                  description: CertificateAuthorities names a secret that contains
                    a CA file entry to use.
                  properties:
                    secretName:
                      type: string
                  type: object
                url:
                  description: ElasticsearchURL is the URL to the target Elasticsearch
                  type: string
              required:
              - url
              type: object
            elasticsearchRef:
              description: ElasticsearchRef references an Elasticsearch resource in
                the Kubernetes cluster. If the namespace is not specified, the current
                resource namespace will be used.
              properties:
                name:
                  type: string
                namespace:
                  type: string
              required:
              - name
              type: object
            featureFlags:
              description: FeatureFlags are instance-specific flags that enable or
                disable specific experimental features
              type: object
            http:
              description: HTTP contains settings for HTTP.
              properties:
                service:
                  description: Service is a template for the Kubernetes Service
                  properties:
                    metadata:
                      description: ObjectMeta is metadata for the service. The name
                        and namespace provided here is managed by ECK and will be
                        ignored.
                      type: object
                    spec:
                      description: Spec defines the behavior of the service.
                      type: object
                  type: object
                tls:
                  description: TLS describe additional options to consider when generating
                    HTTP TLS certificates.
                  properties:
                    certificate:
                      description: 'Certificate is a reference to a secret that contains
                        the certificate and private key to be used.  The secret should
                        have the following content:  - `ca.crt`: The certificate authority
                        (optional) - `tls.crt`: The certificate (or a chain). - `tls.key`:
                        The private key to the first certificate in the certificate
                        chain.'
                      properties:
                        secretName:
                          type: string
                      type: object
                    selfSignedCertificate:
                      description: SelfSignedCertificate define options to apply to
                        self-signed certificate managed by the operator.
                      properties:
                        disabled:
                          description: Disabled turns off the provisioning of self-signed
                            HTTP TLS certificates.
                          type: boolean
                        subjectAltNames:
                          description: 'SubjectAlternativeNames is a list of SANs
                            to include in the HTTP TLS certificates. For example:
                            a wildcard DNS to expose the cluster.'
                          items:
                            properties:
                              dns:
                                type: string
                              ip:
                                type: string
                            type: object
                          type: array
                      type: object
                  type: object
              type: object
            image:
              description: Image represents the docker image that will be used.
              type: string
            nodeCount:
              description: NodeCount defines how many nodes the Kibana deployment
                must have.
              format: int32
              type: integer
            podTemplate:
              description: PodTemplate can be used to propagate configuration to Kibana
                pods. This allows specifying custom annotations, labels, environment
                variables, affinity, resources, etc. for the pods created from this
                NodeSpec.
              type: object
            secureSettings:
              description: SecureSettings reference a secret containing secure settings,
                to be injected into Kibana keystore on each node. Each individual
                key/value entry in the referenced secret is considered as an individual
                secure setting to be injected. The secret must exist in the same namespace
                as the Kibana resource.
              properties:
                secretName:
                  type: string
              type: object
            version:
              description: Version represents the version of Kibana
              type: string
          type: object
        status:
          properties:
            associationStatus:
              type: string
            health:
              type: string
          type: object
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
